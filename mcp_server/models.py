# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:20:29+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class CommonErrorCode(Enum):
    COMMON_ERROR_CODE_UNSPECIFIED = 'COMMON_ERROR_CODE_UNSPECIFIED'
    INVALID_CREDENTIALS = 'INVALID_CREDENTIALS'
    REQUIRED_FIELDS_MISSING = 'REQUIRED_FIELDS_MISSING'
    INVALID_FIELDS = 'INVALID_FIELDS'
    BACKEND = 'BACKEND'
    GENERAL = 'GENERAL'
    INTERNAL = 'INTERNAL'
    IO_ERROR = 'IO_ERROR'
    NOT_FOUND = 'NOT_FOUND'
    EVENT_BUS = 'EVENT_BUS'
    ALREADY_EXISTS = 'ALREADY_EXISTS'
    CONCORD = 'CONCORD'
    CONVERSION = 'CONVERSION'
    FLUME = 'FLUME'
    PERMISSION = 'PERMISSION'
    SALES_FORCE = 'SALES_FORCE'
    SPANNER = 'SPANNER'
    UNIMPLEMENTED = 'UNIMPLEMENTED'
    RELTIO = 'RELTIO'
    WORKFLOW_NOT_FOUND = 'WORKFLOW_NOT_FOUND'
    QUOTA_THROTTLED = 'QUOTA_THROTTLED'
    QUOTA_ENQUEUED = 'QUOTA_ENQUEUED'
    INVALID_QUOTA_CONFIGURATION = 'INVALID_QUOTA_CONFIGURATION'
    TASK_NOT_FOUND = 'TASK_NOT_FOUND'
    EXECUTION_TIMEOUT = 'EXECUTION_TIMEOUT'
    INVALID_EVENT_EXECUTION_STATE = 'INVALID_EVENT_EXECUTION_STATE'
    INVALID_ATTRIBUTE = 'INVALID_ATTRIBUTE'
    MISSING_ATTRIBUTE = 'MISSING_ATTRIBUTE'
    CLIENT_UNAUTHORIZED_FOR_WORKFLOW = 'CLIENT_UNAUTHORIZED_FOR_WORKFLOW'
    INVALID_PARAMETER = 'INVALID_PARAMETER'
    MISSING_PARAMETER = 'MISSING_PARAMETER'
    UNAUTHROIZED_WORKFLOW_EDITOR_ACTION = 'UNAUTHROIZED_WORKFLOW_EDITOR_ACTION'
    FAILED_PRECONDITION = 'FAILED_PRECONDITION'
    INVALID_CLIENT = 'INVALID_CLIENT'
    MISSING_CLIENT = 'MISSING_CLIENT'
    INVALID_WORKFLOW = 'INVALID_WORKFLOW'
    MISSING_QUOTA_CONFIGURATION = 'MISSING_QUOTA_CONFIGURATION'
    UNHANDLED_TASK_ERROR = 'UNHANDLED_TASK_ERROR'
    SCRIPT_TASK_RUNTIME_ERROR = 'SCRIPT_TASK_RUNTIME_ERROR'
    RPC = 'RPC'
    INVALID_PROTO = 'INVALID_PROTO'
    UNHANDLED_EVENTBUS_ERROR = 'UNHANDLED_EVENTBUS_ERROR'
    INVALID_TASK_STATE = 'INVALID_TASK_STATE'
    TYPED_TASK_INVALID_INPUT_OPERATION = 'TYPED_TASK_INVALID_INPUT_OPERATION'
    TYPED_TASK_INVALID_OUTPUT_OPERATION = 'TYPED_TASK_INVALID_OUTPUT_OPERATION'
    VALIDATION_ERROR = 'VALIDATION_ERROR'
    RESUME_ERROR = 'RESUME_ERROR'
    APPS_SCRIPT_EXECUTION_ERROR = 'APPS_SCRIPT_EXECUTION_ERROR'
    INVALID_VECTOR_USER = 'INVALID_VECTOR_USER'
    INFORMATICA = 'INFORMATICA'
    RETRYABLE_TASK_ERROR = 'RETRYABLE_TASK_ERROR'
    INVALID_TENANT = 'INVALID_TENANT'
    WRONG_TENANT = 'WRONG_TENANT'
    INFORMATICA_BACKEND_UNAVAILABLE = 'INFORMATICA_BACKEND_UNAVAILABLE'
    RPC_PERMISSION_DENIED = 'RPC_PERMISSION_DENIED'
    SYNC_EVENTBUS_EXECUTION_TIMEOUT = 'SYNC_EVENTBUS_EXECUTION_TIMEOUT'
    ASYNC_EVENTBUS_EXECUTION_TIMEOUT = 'ASYNC_EVENTBUS_EXECUTION_TIMEOUT'
    NOT_SUPPORTED_DATA_TYPE = 'NOT_SUPPORTED_DATA_TYPE'
    UNSANITIZED_USER_INPUT = 'UNSANITIZED_USER_INPUT'
    TRANSFORM_EXPRESSION_EVALUATION_ERROR = 'TRANSFORM_EXPRESSION_EVALUATION_ERROR'
    HTTP_EXCEPTION = 'HTTP_EXCEPTION'
    EXECUTION_CANCELLED = 'EXECUTION_CANCELLED'


class CrmlogErrorCode(BaseModel):
    commonErrorCode: Optional[CommonErrorCode] = None


class AllowedCredentialType(Enum):
    CREDENTIAL_TYPE_UNSPECIFIED = 'CREDENTIAL_TYPE_UNSPECIFIED'
    USERNAME_AND_PASSWORD = 'USERNAME_AND_PASSWORD'
    API_KEY = 'API_KEY'
    OAUTH2_AUTHORIZATION_CODE = 'OAUTH2_AUTHORIZATION_CODE'
    OAUTH2_IMPLICIT = 'OAUTH2_IMPLICIT'
    OAUTH2_CLIENT_CREDENTIALS = 'OAUTH2_CLIENT_CREDENTIALS'
    OAUTH2_RESOURCE_OWNER_CREDENTIALS = 'OAUTH2_RESOURCE_OWNER_CREDENTIALS'
    JWT = 'JWT'
    AUTH_TOKEN = 'AUTH_TOKEN'
    SERVICE_ACCOUNT = 'SERVICE_ACCOUNT'
    CLIENT_CERTIFICATE_ONLY = 'CLIENT_CERTIFICATE_ONLY'
    OIDC_TOKEN = 'OIDC_TOKEN'


class EnterpriseCrmEventbusAuthconfigAuthConfigTaskParam(BaseModel):
    allowedCredentialTypes: Optional[List[AllowedCredentialType]] = Field(
        None,
        description='Defines the credential types to be supported as Task may restrict specific types to use, e.g. Cloud SQL Task will use username/password type only.',
    )
    allowedServiceAccountInContext: Optional[bool] = None
    authConfigId: Optional[str] = Field(None, description='UUID of the AuthConfig.')
    scope: Optional[str] = Field(
        None, description='A space-delimited list of requested scope permissions.'
    )
    useServiceAccountInContext: Optional[bool] = None


class DataType(Enum):
    DATA_TYPE_UNSPECIFIED = 'DATA_TYPE_UNSPECIFIED'
    EMAIL = 'EMAIL'
    URL = 'URL'
    CURRENCY = 'CURRENCY'
    TIMESTAMP = 'TIMESTAMP'
    DOMAIN_NAME = 'DOMAIN_NAME'


class Searchable(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    YES = 'YES'
    NO = 'NO'


class FilterType(Enum):
    DEFAULT_INCLUSIVE = 'DEFAULT_INCLUSIVE'
    EXCLUSIVE = 'EXCLUSIVE'


class EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumList(BaseModel):
    enumStrings: Optional[List[str]] = None
    filterType: Optional[FilterType] = None


class EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValue(BaseModel):
    absolute: Optional[str] = None
    percentage: Optional[int] = None


class FunctionName(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    NOW_IN_MILLIS = 'NOW_IN_MILLIS'
    INT_LIST = 'INT_LIST'
    ENVIRONMENT = 'ENVIRONMENT'
    GET_EXECUTION_ID = 'GET_EXECUTION_ID'
    GET_INTEGRATION_NAME = 'GET_INTEGRATION_NAME'
    GET_REGION = 'GET_REGION'
    GET_UUID = 'GET_UUID'
    GET_PROJECT_ID = 'GET_PROJECT_ID'


class EnterpriseCrmEventbusProtoBaseFunction(BaseModel):
    functionName: Optional[FunctionName] = None


class FunctionName1(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    GET = 'GET'
    APPEND = 'APPEND'
    SIZE = 'SIZE'
    TO_SET = 'TO_SET'
    APPEND_ALL = 'APPEND_ALL'
    TO_JSON = 'TO_JSON'
    SET = 'SET'
    REMOVE = 'REMOVE'
    REMOVE_AT = 'REMOVE_AT'
    CONTAINS = 'CONTAINS'
    FOR_EACH = 'FOR_EACH'
    FILTER = 'FILTER'


class EnterpriseCrmEventbusProtoBooleanArrayFunction(BaseModel):
    functionName: Optional[FunctionName1] = None


class FunctionName2(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    TO_JSON = 'TO_JSON'
    NOT = 'NOT'
    AND = 'AND'
    NAND = 'NAND'
    OR = 'OR'
    XOR = 'XOR'
    NOR = 'NOR'
    XNOR = 'XNOR'
    TO_STRING = 'TO_STRING'
    EQUALS = 'EQUALS'


class EnterpriseCrmEventbusProtoBooleanFunction(BaseModel):
    functionName: Optional[FunctionName2] = None


class EnterpriseCrmEventbusProtoBooleanParameterArray(BaseModel):
    booleanValues: Optional[List[bool]] = None


class EnterpriseCrmEventbusProtoBuganizerNotification(BaseModel):
    assigneeEmailAddress: Optional[str] = Field(
        None, description='Whom to assign the new bug. Optional.'
    )
    componentId: Optional[str] = Field(
        None,
        description='ID of the buganizer component within which to create a new issue. Required.',
    )
    templateId: Optional[str] = Field(
        None, description='ID of the buganizer template to use. Optional.'
    )
    title: Optional[str] = Field(
        None, description='Title of the issue to be created. Required.'
    )


class EnterpriseCrmEventbusProtoCloudKmsConfig(BaseModel):
    gcpProjectId: Optional[str] = Field(
        None,
        description='Optional. The id of GCP project where the KMS key is stored. If not provided, assume the key is stored in the same GCP project defined in Client (tag 14).',
    )
    keyName: Optional[str] = Field(
        None,
        description='A Cloud KMS key is a named object containing one or more key versions, along with metadata for the key. A key exists on exactly one key ring tied to a specific location.',
    )
    keyRingName: Optional[str] = Field(
        None,
        description="A key ring organizes keys in a specific Google Cloud location and allows you to manage access control on groups of keys. A key ring's name does not need to be unique across a Google Cloud project, but must be unique within a given location.",
    )
    keyVersionName: Optional[str] = Field(
        None,
        description="Optional. Each version of a key contains key material used for encryption or signing. A key's version is represented by an integer, starting at 1. To decrypt data or verify a signature, you must use the same key version that was used to encrypt or sign the data.",
    )
    locationName: Optional[str] = Field(
        None, description='Location name of the key ring, e.g. "us-west1".'
    )


class EnterpriseCrmEventbusProtoCloudSchedulerConfig(BaseModel):
    cronTab: Optional[str] = Field(
        None, description='Required. The cron tab of cloud scheduler trigger.'
    )
    errorMessage: Optional[str] = Field(
        None,
        description='Optional. When the job was deleted from Pantheon UI, error_message will be populated when Get/List integrations',
    )
    location: Optional[str] = Field(
        None,
        description='Required. The location where associated cloud scheduler job will be created',
    )
    serviceAccountEmail: Optional[str] = Field(
        None,
        description='Required. Service account used by Cloud Scheduler to trigger the integration at scheduled time',
    )


class Operator(Enum):
    UNSET = 'UNSET'
    EQUALS = 'EQUALS'
    CONTAINS = 'CONTAINS'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    EXISTS = 'EXISTS'
    DOES_NOT_EXIST = 'DOES_NOT_EXIST'
    IS_EMPTY = 'IS_EMPTY'
    IS_NOT_EMPTY = 'IS_NOT_EMPTY'


class EnterpriseCrmEventbusProtoConditionResult(BaseModel):
    currentTaskNumber: Optional[str] = Field(
        None, description='the current task number.'
    )
    nextTaskNumber: Optional[str] = Field(None, description='the next task number.')
    result: Optional[bool] = Field(
        None,
        description="the result comes out after evaluate the combined condition. True if there's no combined condition specified.",
    )


class EnterpriseCrmEventbusProtoConnectorsConnection(BaseModel):
    connectionName: Optional[str] = Field(
        None,
        description='Connection name Format: projects/{project}/locations/{location}/connections/{connection}',
    )
    connectorVersion: Optional[str] = Field(
        None,
        description='Connector version Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version}',
    )
    serviceName: Optional[str] = Field(
        None,
        description='Service name Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}',
    )


class Operation(Enum):
    OPERATION_UNSPECIFIED = 'OPERATION_UNSPECIFIED'
    EXECUTE_ACTION = 'EXECUTE_ACTION'
    LIST_ENTITIES = 'LIST_ENTITIES'
    GET_ENTITY = 'GET_ENTITY'
    CREATE_ENTITY = 'CREATE_ENTITY'
    UPDATE_ENTITY = 'UPDATE_ENTITY'
    DELETE_ENTITY = 'DELETE_ENTITY'


class EnterpriseCrmEventbusProtoConnectorsGenericConnectorTaskConfig(BaseModel):
    connection: Optional[EnterpriseCrmEventbusProtoConnectorsConnection] = Field(
        None, description='User-selected connection.'
    )
    operation: Optional[Operation] = Field(
        None, description='Operation to perform using the configured connection.'
    )


class EnterpriseCrmEventbusProtoCoordinate(BaseModel):
    x: Optional[int] = None
    y: Optional[int] = None


class EnterpriseCrmEventbusProtoDoubleArray(BaseModel):
    values: Optional[List[float]] = None


class FunctionName3(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    GET = 'GET'
    APPEND = 'APPEND'
    SIZE = 'SIZE'
    SUM = 'SUM'
    AVG = 'AVG'
    MAX = 'MAX'
    MIN = 'MIN'
    TO_SET = 'TO_SET'
    APPEND_ALL = 'APPEND_ALL'
    TO_JSON = 'TO_JSON'
    SET = 'SET'
    REMOVE = 'REMOVE'
    REMOVE_AT = 'REMOVE_AT'
    CONTAINS = 'CONTAINS'
    FOR_EACH = 'FOR_EACH'
    FILTER = 'FILTER'


class EnterpriseCrmEventbusProtoDoubleArrayFunction(BaseModel):
    functionName: Optional[FunctionName3] = None


class FunctionName4(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    TO_JSON = 'TO_JSON'
    TO_STRING = 'TO_STRING'
    ADD = 'ADD'
    SUBTRACT = 'SUBTRACT'
    MULTIPLY = 'MULTIPLY'
    DIVIDE = 'DIVIDE'
    EXPONENT = 'EXPONENT'
    ROUND = 'ROUND'
    FLOOR = 'FLOOR'
    CEIL = 'CEIL'
    GREATER_THAN = 'GREATER_THAN'
    LESS_THAN = 'LESS_THAN'
    EQUALS = 'EQUALS'
    GREATER_THAN_EQUALS = 'GREATER_THAN_EQUALS'
    LESS_THAN_EQUALS = 'LESS_THAN_EQUALS'
    MOD = 'MOD'


class EnterpriseCrmEventbusProtoDoubleFunction(BaseModel):
    functionName: Optional[FunctionName4] = None


class EnterpriseCrmEventbusProtoDoubleParameterArray(BaseModel):
    doubleValues: Optional[List[float]] = None


class Severity(Enum):
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    ERROR = 'ERROR'
    WARN = 'WARN'
    INFO = 'INFO'


class EnterpriseCrmEventbusProtoErrorDetail(BaseModel):
    errorCode: Optional[CrmlogErrorCode] = Field(
        None,
        description='The associated error-code, which can be a common or internal code.',
    )
    errorMessage: Optional[str] = Field(
        None,
        description='The full text of the error message, including any parameters that were thrown along with the exception.',
    )
    severity: Optional[Severity] = Field(
        None, description='The severity of the error: ERROR|WARN|INFO.'
    )
    taskNumber: Optional[int] = Field(
        None,
        description='The task try-number, in which, the error occurred. If zero, the error happened at the event level.',
    )


class EventExecutionState(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    ON_HOLD = 'ON_HOLD'
    IN_PROCESS = 'IN_PROCESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'
    RETRY_ON_HOLD = 'RETRY_ON_HOLD'
    SUSPENDED = 'SUSPENDED'


class EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats(BaseModel):
    endTime: Optional[str] = Field(
        None, description='The end time of the event execution for current attempt.'
    )
    startTime: Optional[str] = Field(
        None,
        description="The start time of the event execution for current attempt. This could be in the future if it's been scheduled.",
    )


class EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata(
    BaseModel
):
    eventAttemptNum: Optional[int] = Field(
        None, description='the event attempt number this snapshot belongs to.'
    )
    taskAttemptNum: Optional[int] = Field(
        None,
        description='the task attempt number this snapshot belongs to. Could be empty.',
    )
    taskLabel: Optional[str] = Field(
        None,
        description='the task label associated with this snapshot. Could be empty.',
    )
    taskName: Optional[str] = Field(
        None, description='the task name associated with this snapshot. Could be empty.'
    )
    taskNumber: Optional[str] = Field(
        None,
        description='The task number associated with this snapshot. Could be empty.',
    )


class EnterpriseCrmEventbusProtoExecutionTraceInfo(BaseModel):
    parentEventExecutionInfoId: Optional[str] = Field(
        None,
        description='Parent event execution info id that triggers the current execution through SubWorkflowExecutorTask.',
    )
    traceId: Optional[str] = Field(
        None, description='Used to aggregate ExecutionTraceInfo.'
    )


class Source(Enum):
    SOURCE_UNSPECIFIED = 'SOURCE_UNSPECIFIED'
    APIGEE = 'APIGEE'
    SECURITY = 'SECURITY'


class EnterpriseCrmEventbusProtoExternalTraffic(BaseModel):
    gcpProjectId: Optional[str] = Field(
        None, description='User’s GCP project id the traffic is referring to.'
    )
    gcpProjectNumber: Optional[str] = Field(
        None, description='User’s GCP project number the traffic is referring to.'
    )
    location: Optional[str] = Field(
        None, description="Location for the user's request."
    )
    source: Optional[Source] = Field(
        None,
        description='LINT.ThenChange(//depot/google3/enterprise/crm/eventbus/proto/product.proto:product, //depot/google3/java/com/google/enterprise/crm/integrationplatform/api/utils/ConverterUtils.java:source_to_product)',
    )


class RetryStrategy(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    IGNORE = 'IGNORE'
    NONE = 'NONE'
    FATAL = 'FATAL'
    FIXED_INTERVAL = 'FIXED_INTERVAL'
    LINEAR_BACKOFF = 'LINEAR_BACKOFF'
    EXPONENTIAL_BACKOFF = 'EXPONENTIAL_BACKOFF'
    RESTART_WORKFLOW_WITH_BACKOFF = 'RESTART_WORKFLOW_WITH_BACKOFF'


class EnterpriseCrmEventbusProtoFailurePolicy(BaseModel):
    intervalInSeconds: Optional[str] = Field(
        None,
        description='Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the initial interval for backoff.',
    )
    maxNumRetries: Optional[int] = Field(
        None,
        description='Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the number of times the task will be retried if failed.',
    )
    retryStrategy: Optional[RetryStrategy] = Field(
        None, description='Defines what happens to the task upon failure.'
    )


class Cardinality(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    OPTIONAL = 'OPTIONAL'


class FieldType(Enum):
    DATA_TYPE_UNSPECIFIED = 'DATA_TYPE_UNSPECIFIED'
    STRING_VALUE = 'STRING_VALUE'
    INT_VALUE = 'INT_VALUE'
    DOUBLE_VALUE = 'DOUBLE_VALUE'
    BOOLEAN_VALUE = 'BOOLEAN_VALUE'
    PROTO_VALUE = 'PROTO_VALUE'
    SERIALIZED_OBJECT_VALUE = 'SERIALIZED_OBJECT_VALUE'
    STRING_ARRAY = 'STRING_ARRAY'
    INT_ARRAY = 'INT_ARRAY'
    DOUBLE_ARRAY = 'DOUBLE_ARRAY'
    PROTO_ARRAY = 'PROTO_ARRAY'
    PROTO_ENUM = 'PROTO_ENUM'
    BOOLEAN_ARRAY = 'BOOLEAN_ARRAY'
    PROTO_ENUM_ARRAY = 'PROTO_ENUM_ARRAY'
    BYTES = 'BYTES'
    BYTES_ARRAY = 'BYTES_ARRAY'
    NON_SERIALIZABLE_OBJECT = 'NON_SERIALIZABLE_OBJECT'
    JSON_VALUE = 'JSON_VALUE'


class EnterpriseCrmEventbusProtoIntArray(BaseModel):
    values: Optional[List[str]] = None


class FunctionName5(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    GET = 'GET'
    APPEND = 'APPEND'
    SIZE = 'SIZE'
    SUM = 'SUM'
    AVG = 'AVG'
    MAX = 'MAX'
    MIN = 'MIN'
    TO_SET = 'TO_SET'
    APPEND_ALL = 'APPEND_ALL'
    TO_JSON = 'TO_JSON'
    SET = 'SET'
    REMOVE = 'REMOVE'
    REMOVE_AT = 'REMOVE_AT'
    CONTAINS = 'CONTAINS'
    FOR_EACH = 'FOR_EACH'
    FILTER = 'FILTER'


class EnterpriseCrmEventbusProtoIntArrayFunction(BaseModel):
    functionName: Optional[FunctionName5] = None


class FunctionName6(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    ADD = 'ADD'
    SUBTRACT = 'SUBTRACT'
    MULTIPLY = 'MULTIPLY'
    DIVIDE = 'DIVIDE'
    EXPONENT = 'EXPONENT'
    GREATER_THAN_EQUAL_TO = 'GREATER_THAN_EQUAL_TO'
    GREATER_THAN = 'GREATER_THAN'
    LESS_THAN_EQUAL_TO = 'LESS_THAN_EQUAL_TO'
    LESS_THAN = 'LESS_THAN'
    TO_DOUBLE = 'TO_DOUBLE'
    TO_STRING = 'TO_STRING'
    EQUALS = 'EQUALS'
    TO_JSON = 'TO_JSON'
    MOD = 'MOD'
    EPOCH_TO_HUMAN_READABLE_TIME = 'EPOCH_TO_HUMAN_READABLE_TIME'


class EnterpriseCrmEventbusProtoIntFunction(BaseModel):
    functionName: Optional[FunctionName6] = None


class EnterpriseCrmEventbusProtoIntParameterArray(BaseModel):
    intValues: Optional[List[str]] = None


class FunctionName7(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    GET_PROPERTY = 'GET_PROPERTY'
    GET_ELEMENT = 'GET_ELEMENT'
    APPEND_ELEMENT = 'APPEND_ELEMENT'
    SIZE = 'SIZE'
    SET_PROPERTY = 'SET_PROPERTY'
    FLATTEN = 'FLATTEN'
    FLATTEN_ONCE = 'FLATTEN_ONCE'
    MERGE = 'MERGE'
    TO_STRING = 'TO_STRING'
    TO_INT = 'TO_INT'
    TO_DOUBLE = 'TO_DOUBLE'
    TO_BOOLEAN = 'TO_BOOLEAN'
    TO_PROTO = 'TO_PROTO'
    TO_STRING_ARRAY = 'TO_STRING_ARRAY'
    TO_INT_ARRAY = 'TO_INT_ARRAY'
    TO_DOUBLE_ARRAY = 'TO_DOUBLE_ARRAY'
    TO_PROTO_ARRAY = 'TO_PROTO_ARRAY'
    TO_BOOLEAN_ARRAY = 'TO_BOOLEAN_ARRAY'
    REMOVE_PROPERTY = 'REMOVE_PROPERTY'
    RESOLVE_TEMPLATE = 'RESOLVE_TEMPLATE'
    EQUALS = 'EQUALS'
    FOR_EACH = 'FOR_EACH'
    FILTER_ELEMENTS = 'FILTER_ELEMENTS'


class EnterpriseCrmEventbusProtoJsonFunction(BaseModel):
    functionName: Optional[FunctionName7] = None


class SeedPeriod(Enum):
    SEED_PERIOD_UNSPECIFIED = 'SEED_PERIOD_UNSPECIFIED'
    DAY = 'DAY'
    WEEK = 'WEEK'
    MONTH = 'MONTH'


class SeedScope(Enum):
    SEED_SCOPE_UNSPECIFIED = 'SEED_SCOPE_UNSPECIFIED'
    EVENT_NAME = 'EVENT_NAME'
    TIME_PERIOD = 'TIME_PERIOD'
    PARAM_NAME = 'PARAM_NAME'


class FailureLocation(Enum):
    UNKNOWN = 'UNKNOWN'
    SUBWORKFLOW = 'SUBWORKFLOW'
    PARAM_OVERRIDING = 'PARAM_OVERRIDING'
    PARAM_AGGREGATING = 'PARAM_AGGREGATING'
    SETTING_ITERATION_ELEMENT = 'SETTING_ITERATION_ELEMENT'
    GETTING_LIST_TO_ITERATE = 'GETTING_LIST_TO_ITERATE'
    CONDITION_EVALUATION = 'CONDITION_EVALUATION'
    BUILDING_REQUEST = 'BUILDING_REQUEST'


class EnterpriseCrmEventbusProtoLoopMetadata(BaseModel):
    currentIterationCount: Optional[str] = Field(
        None, description='Starting from 1, not 0.'
    )
    currentIterationDetail: Optional[str] = Field(
        None,
        description='Needs to be set by the loop impl class before each iteration. The abstract loop class will append the request and response to it. Eg. The foreach Loop will clean up and set it as the current iteration element at the start of each loop. The post request and response will be appended to the value once they are available.',
    )
    errorMsg: Optional[str] = Field(
        None, description='Add the error message when loops fail.'
    )
    failureLocation: Optional[FailureLocation] = Field(
        None, description='Indicates where in the loop logic did it error out.'
    )


class EnterpriseCrmEventbusProtoNextTeardownTask(BaseModel):
    name: Optional[str] = Field(
        None, description='Required. Name of the next teardown task.'
    )


class ElementType(Enum):
    UNKNOWN_TYPE = 'UNKNOWN_TYPE'
    TASK_CONFIG = 'TASK_CONFIG'
    TRIGGER_CONFIG = 'TRIGGER_CONFIG'


class EnterpriseCrmEventbusProtoNodeIdentifier(BaseModel):
    elementIdentifier: Optional[str] = Field(
        None, description='Configuration of the edge.'
    )
    elementType: Optional[ElementType] = Field(
        None,
        description='Destination node where the edge ends. It can only be a task config.',
    )


class InputDisplayOption(Enum):
    DEFAULT = 'DEFAULT'
    STRING_MULTI_LINE = 'STRING_MULTI_LINE'
    NUMBER_SLIDER = 'NUMBER_SLIDER'
    BOOLEAN_TOGGLE = 'BOOLEAN_TOGGLE'


class ParameterNameOption(Enum):
    DEFAULT_NOT_PARAMETER_NAME = 'DEFAULT_NOT_PARAMETER_NAME'
    IS_PARAMETER_NAME = 'IS_PARAMETER_NAME'
    KEY_IS_PARAMETER_NAME = 'KEY_IS_PARAMETER_NAME'
    VALUE_IS_PARAMETER_NAME = 'VALUE_IS_PARAMETER_NAME'


class EnterpriseCrmEventbusProtoParamSpecEntryConfig(BaseModel):
    descriptivePhrase: Optional[str] = Field(
        None, description='A short phrase to describe what this parameter contains.'
    )
    helpText: Optional[str] = Field(
        None,
        description='Detailed help text for this parameter containing information not provided elsewhere. For example, instructions on how to migrate from a deprecated parameter.',
    )
    hideDefaultValue: Optional[bool] = Field(
        None, description='Whether the default value is hidden in the UI.'
    )
    inputDisplayOption: Optional[InputDisplayOption] = None
    isHidden: Optional[bool] = Field(
        None, description='Whether this field is hidden in the UI.'
    )
    label: Optional[str] = Field(
        None, description='A user-friendly label for the parameter.'
    )
    parameterNameOption: Optional[ParameterNameOption] = None
    subSectionLabel: Optional[str] = Field(
        None,
        description='A user-friendly label for subSection under which the parameter will be displayed.',
    )
    uiPlaceholderText: Optional[str] = Field(
        None,
        description='Placeholder text which will appear in the UI input form for this parameter.',
    )


class EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinition(BaseModel):
    fullName: Optional[str] = Field(
        None,
        description='The fully-qualified proto name. This message, for example, would be "enterprise.crm.eventbus.proto.ParamSpecEntry.ProtoDefinition".',
    )
    path: Optional[str] = Field(
        None,
        description="Path to the proto file that contains the message type's definition.",
    )


class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRange(BaseModel):
    max: Optional[float] = Field(
        None, description='The inclusive maximum of the acceptable range.'
    )
    min: Optional[float] = Field(
        None, description='The inclusive minimum of the acceptable range.'
    )


class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRange(BaseModel):
    max: Optional[str] = Field(
        None, description='The inclusive maximum of the acceptable range.'
    )
    min: Optional[str] = Field(
        None, description='The inclusive minimum of the acceptable range.'
    )


class EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegex(BaseModel):
    exclusive: Optional[bool] = Field(
        None,
        description='Whether the regex matcher is applied exclusively (if true, matching values will be rejected).',
    )
    regex: Optional[str] = Field(
        None, description='The regex applied to the input value(s).'
    )


class KeyType(Enum):
    DATA_TYPE_UNSPECIFIED = 'DATA_TYPE_UNSPECIFIED'
    STRING_VALUE = 'STRING_VALUE'
    INT_VALUE = 'INT_VALUE'
    DOUBLE_VALUE = 'DOUBLE_VALUE'
    BOOLEAN_VALUE = 'BOOLEAN_VALUE'
    PROTO_VALUE = 'PROTO_VALUE'
    SERIALIZED_OBJECT_VALUE = 'SERIALIZED_OBJECT_VALUE'
    STRING_ARRAY = 'STRING_ARRAY'
    INT_ARRAY = 'INT_ARRAY'
    DOUBLE_ARRAY = 'DOUBLE_ARRAY'
    PROTO_ARRAY = 'PROTO_ARRAY'
    PROTO_ENUM = 'PROTO_ENUM'
    BOOLEAN_ARRAY = 'BOOLEAN_ARRAY'
    PROTO_ENUM_ARRAY = 'PROTO_ENUM_ARRAY'
    BYTES = 'BYTES'
    BYTES_ARRAY = 'BYTES_ARRAY'
    NON_SERIALIZABLE_OBJECT = 'NON_SERIALIZABLE_OBJECT'
    JSON_VALUE = 'JSON_VALUE'


class ValueType(Enum):
    DATA_TYPE_UNSPECIFIED = 'DATA_TYPE_UNSPECIFIED'
    STRING_VALUE = 'STRING_VALUE'
    INT_VALUE = 'INT_VALUE'
    DOUBLE_VALUE = 'DOUBLE_VALUE'
    BOOLEAN_VALUE = 'BOOLEAN_VALUE'
    PROTO_VALUE = 'PROTO_VALUE'
    SERIALIZED_OBJECT_VALUE = 'SERIALIZED_OBJECT_VALUE'
    STRING_ARRAY = 'STRING_ARRAY'
    INT_ARRAY = 'INT_ARRAY'
    DOUBLE_ARRAY = 'DOUBLE_ARRAY'
    PROTO_ARRAY = 'PROTO_ARRAY'
    PROTO_ENUM = 'PROTO_ENUM'
    BOOLEAN_ARRAY = 'BOOLEAN_ARRAY'
    PROTO_ENUM_ARRAY = 'PROTO_ENUM_ARRAY'
    BYTES = 'BYTES'
    BYTES_ARRAY = 'BYTES_ARRAY'
    NON_SERIALIZABLE_OBJECT = 'NON_SERIALIZABLE_OBJECT'
    JSON_VALUE = 'JSON_VALUE'


class FunctionName8(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    GET = 'GET'
    APPEND = 'APPEND'
    SIZE = 'SIZE'
    TO_SET = 'TO_SET'
    APPEND_ALL = 'APPEND_ALL'
    TO_JSON = 'TO_JSON'
    SET = 'SET'
    REMOVE = 'REMOVE'
    REMOVE_AT = 'REMOVE_AT'
    CONTAINS = 'CONTAINS'
    FOR_EACH = 'FOR_EACH'
    FILTER = 'FILTER'


class EnterpriseCrmEventbusProtoProtoArrayFunction(BaseModel):
    functionName: Optional[FunctionName8] = None


class FunctionName9(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    GET_STRING_SUBFIELD = 'GET_STRING_SUBFIELD'
    GET_INT_SUBFIELD = 'GET_INT_SUBFIELD'
    GET_DOUBLE_SUBFIELD = 'GET_DOUBLE_SUBFIELD'
    GET_BOOLEAN_SUBFIELD = 'GET_BOOLEAN_SUBFIELD'
    GET_STRING_ARRAY_SUBFIELD = 'GET_STRING_ARRAY_SUBFIELD'
    GET_INT_ARRAY_SUBFIELD = 'GET_INT_ARRAY_SUBFIELD'
    GET_DOUBLE_ARRAY_SUBFIELD = 'GET_DOUBLE_ARRAY_SUBFIELD'
    GET_BOOLEAN_ARRAY_SUBFIELD = 'GET_BOOLEAN_ARRAY_SUBFIELD'
    GET_PROTO_ARRAY_SUBFIELD = 'GET_PROTO_ARRAY_SUBFIELD'
    GET_PROTO_SUBFIELD = 'GET_PROTO_SUBFIELD'
    TO_JSON = 'TO_JSON'
    GET_BYTES_SUBFIELD_AS_UTF_8_STRING = 'GET_BYTES_SUBFIELD_AS_UTF_8_STRING'
    GET_BYTES_SUBFIELD_AS_PROTO = 'GET_BYTES_SUBFIELD_AS_PROTO'
    EQUALS = 'EQUALS'


class EnterpriseCrmEventbusProtoProtoFunction(BaseModel):
    functionName: Optional[FunctionName9] = None


class EnterpriseCrmEventbusProtoProtoParameterArray(BaseModel):
    protoValues: Optional[List[Dict[str, Any]]] = None


class EnterpriseCrmEventbusProtoSerializedObjectParameter(BaseModel):
    objectValue: Optional[str] = None


class EnterpriseCrmEventbusProtoStringArray(BaseModel):
    values: Optional[List[str]] = None


class FunctionName10(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    GET = 'GET'
    APPEND = 'APPEND'
    SIZE = 'SIZE'
    TO_SET = 'TO_SET'
    APPEND_ALL = 'APPEND_ALL'
    TO_JSON = 'TO_JSON'
    SET = 'SET'
    REMOVE = 'REMOVE'
    REMOVE_AT = 'REMOVE_AT'
    CONTAINS = 'CONTAINS'
    FOR_EACH = 'FOR_EACH'
    FILTER = 'FILTER'


class EnterpriseCrmEventbusProtoStringArrayFunction(BaseModel):
    functionName: Optional[FunctionName10] = None


class FunctionName11(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    CONCAT = 'CONCAT'
    TO_UPPERCASE = 'TO_UPPERCASE'
    TO_LOWERCASE = 'TO_LOWERCASE'
    CONTAINS = 'CONTAINS'
    SPLIT = 'SPLIT'
    LENGTH = 'LENGTH'
    EQUALS = 'EQUALS'
    TO_INT = 'TO_INT'
    TO_DOUBLE = 'TO_DOUBLE'
    TO_BOOLEAN = 'TO_BOOLEAN'
    TO_BASE_64 = 'TO_BASE_64'
    TO_JSON = 'TO_JSON'
    EQUALS_IGNORE_CASE = 'EQUALS_IGNORE_CASE'
    REPLACE_ALL = 'REPLACE_ALL'
    SUBSTRING = 'SUBSTRING'
    RESOLVE_TEMPLATE = 'RESOLVE_TEMPLATE'
    DECODE_BASE64_STRING = 'DECODE_BASE64_STRING'


class EnterpriseCrmEventbusProtoStringFunction(BaseModel):
    functionName: Optional[FunctionName11] = None


class EnterpriseCrmEventbusProtoStringParameterArray(BaseModel):
    stringValues: Optional[List[str]] = None


class FinalState(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    SUCCEEDED = 'SUCCEEDED'
    SUSPENDED = 'SUSPENDED'


class EnterpriseCrmEventbusProtoSuccessPolicy(BaseModel):
    finalState: Optional[FinalState] = Field(
        None,
        description='State to which the execution snapshot status will be set if the task succeeds.',
    )


class EnterpriseCrmEventbusProtoSuspensionAuthPermissionsGaiaIdentity(BaseModel):
    emailAddress: Optional[str] = None
    gaiaId: Optional[str] = None


class EnterpriseCrmEventbusProtoSuspensionExpiration(BaseModel):
    expireAfterMs: Optional[int] = Field(
        None,
        description='Milliseconds after which the suspension expires, if no action taken.',
    )
    liftWhenExpired: Optional[bool] = Field(
        None,
        description='Whether the suspension will be REJECTED or LIFTED upon expiration. REJECTED is the default behavior.',
    )
    remindAfterMs: Optional[int] = Field(
        None,
        description='Milliseconds after which the previous suspension action reminder, if any, is sent using the selected notification option, for a suspension which is still PENDING_UNSPECIFIED.',
    )


class Product(Enum):
    UNSPECIFIED_PRODUCT = 'UNSPECIFIED_PRODUCT'
    IP = 'IP'
    APIGEE = 'APIGEE'
    SECURITY = 'SECURITY'


class Status(Enum):
    PENDING_UNSPECIFIED = 'PENDING_UNSPECIFIED'
    REJECTED = 'REJECTED'
    LIFTED = 'LIFTED'
    CANCELED = 'CANCELED'


class EnterpriseCrmEventbusProtoSuspensionResolutionInfoAudit(BaseModel):
    resolvedBy: Optional[str] = None
    resolvedByCpi: Optional[str] = None
    timestamp: Optional[str] = None


class MetricType(Enum):
    METRIC_TYPE_UNSPECIFIED = 'METRIC_TYPE_UNSPECIFIED'
    TASK_ERROR_RATE = 'TASK_ERROR_RATE'
    TASK_WARNING_RATE = 'TASK_WARNING_RATE'
    TASK_RATE = 'TASK_RATE'
    TASK_AVERAGE_DURATION = 'TASK_AVERAGE_DURATION'
    TASK_PERCENTILE_DURATION = 'TASK_PERCENTILE_DURATION'


class ThresholdType(Enum):
    UNSPECIFIED_THRESHOLD_TYPE = 'UNSPECIFIED_THRESHOLD_TYPE'
    EXPECTED_MIN = 'EXPECTED_MIN'
    EXPECTED_MAX = 'EXPECTED_MAX'


class EnterpriseCrmEventbusProtoTaskAlertConfig(BaseModel):
    aggregationPeriod: Optional[str] = Field(
        None,
        description='The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week).',
    )
    alertDisabled: Optional[bool] = Field(
        None,
        description='Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this workflow alert.',
    )
    alertName: Optional[str] = Field(
        None,
        description='A name to identify this alert. This will be displayed in the alert subject. If set, this name should be unique in within the scope of the containing workflow.',
    )
    clientId: Optional[str] = Field(
        None,
        description="Client associated with this alert configuration. Must be a client enabled in one of the containing workflow's triggers.",
    )
    durationThresholdMs: Optional[str] = Field(
        None,
        description='Should be specified only for TASK_AVERAGE_DURATION and TASK_PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.',
    )
    errorEnumList: Optional[EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumList] = (
        None
    )
    metricType: Optional[MetricType] = None
    numAggregationPeriods: Optional[int] = Field(
        None,
        description='For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.',
    )
    onlyFinalAttempt: Optional[bool] = Field(
        None, description='Only count final task attempts, not retries.'
    )
    playbookUrl: Optional[str] = Field(
        None,
        description='Link to a playbook for resolving the issue that triggered this alert.',
    )
    thresholdType: Optional[ThresholdType] = Field(
        None,
        description='The threshold type for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.',
    )
    thresholdValue: Optional[
        EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValue
    ] = Field(
        None,
        description='The metric value, above or below which the alert should be triggered.',
    )
    warningEnumList: Optional[
        EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumList
    ] = None


class TaskExecutionState(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    PENDING_EXECUTION = 'PENDING_EXECUTION'
    IN_PROCESS = 'IN_PROCESS'
    SUCCEED = 'SUCCEED'
    FAILED = 'FAILED'
    FATAL = 'FATAL'
    RETRY_ON_HOLD = 'RETRY_ON_HOLD'
    SKIPPED = 'SKIPPED'
    CANCELED = 'CANCELED'
    PENDING_ROLLBACK = 'PENDING_ROLLBACK'
    ROLLBACK_IN_PROCESS = 'ROLLBACK_IN_PROCESS'
    ROLLEDBACK = 'ROLLEDBACK'
    SUSPENDED = 'SUSPENDED'


class EnterpriseCrmEventbusProtoTaskExecutionDetailsTaskAttemptStats(BaseModel):
    endTime: Optional[str] = Field(
        None, description='The end time of the task execution for current attempt.'
    )
    startTime: Optional[str] = Field(
        None,
        description="The start time of the task execution for current attempt. This could be in the future if it's been scheduled.",
    )


class Category(Enum):
    UNSPECIFIED_CATEGORY = 'UNSPECIFIED_CATEGORY'
    CUSTOM = 'CUSTOM'
    FLOW_CONTROL = 'FLOW_CONTROL'
    DATA_MANIPULATION = 'DATA_MANIPULATION'
    SCRIPTING = 'SCRIPTING'
    CONNECTOR = 'CONNECTOR'
    HIDDEN = 'HIDDEN'
    CLOUD_SYSTEMS = 'CLOUD_SYSTEMS'
    CUSTOM_TASK_TEMPLATE = 'CUSTOM_TASK_TEMPLATE'
    TASK_RECOMMENDATIONS = 'TASK_RECOMMENDATIONS'


class DefaultJsonValidationOption(Enum):
    UNSPECIFIED_JSON_VALIDATION_OPTION = 'UNSPECIFIED_JSON_VALIDATION_OPTION'
    SKIP = 'SKIP'
    PRE_EXECUTION = 'PRE_EXECUTION'
    POST_EXECUTION = 'POST_EXECUTION'
    PRE_POST_EXECUTION = 'PRE_POST_EXECUTION'


class ExternalCategory(Enum):
    UNSPECIFIED_EXTERNAL_CATEGORY = 'UNSPECIFIED_EXTERNAL_CATEGORY'
    CORE = 'CORE'
    CONNECTORS = 'CONNECTORS'


class Status1(Enum):
    UNSPECIFIED_STATUS = 'UNSPECIFIED_STATUS'
    DEFAULT_INACTIVE = 'DEFAULT_INACTIVE'
    ACTIVE = 'ACTIVE'


class System(Enum):
    UNSPECIFIED_SYSTEM = 'UNSPECIFIED_SYSTEM'
    GENERIC = 'GENERIC'
    BUGANIZER = 'BUGANIZER'
    SALESFORCE = 'SALESFORCE'
    CLOUD_SQL = 'CLOUD_SQL'
    PLX = 'PLX'
    SHEETS = 'SHEETS'
    GOOGLE_GROUPS = 'GOOGLE_GROUPS'
    EMAIL = 'EMAIL'
    SPANNER = 'SPANNER'
    DATA_BRIDGE = 'DATA_BRIDGE'


class EnterpriseCrmEventbusProtoTaskMetadataAdmin(BaseModel):
    googleGroupEmail: Optional[str] = None
    userEmail: Optional[str] = None


class ModuleId(Enum):
    UNSPECIFIED_TASK_MODULE = 'UNSPECIFIED_TASK_MODULE'
    LABEL = 'LABEL'
    ERROR_HANDLING = 'ERROR_HANDLING'
    TASK_PARAM_TABLE = 'TASK_PARAM_TABLE'
    TASK_PARAM_FORM = 'TASK_PARAM_FORM'
    PRECONDITION = 'PRECONDITION'
    SCRIPT_EDITOR = 'SCRIPT_EDITOR'
    RPC = 'RPC'
    TASK_SUMMARY = 'TASK_SUMMARY'
    SUSPENSION = 'SUSPENSION'
    RPC_TYPED = 'RPC_TYPED'
    SUB_WORKFLOW = 'SUB_WORKFLOW'
    APPS_SCRIPT_NAVIGATOR = 'APPS_SCRIPT_NAVIGATOR'
    SUB_WORKFLOW_FOR_EACH_LOOP = 'SUB_WORKFLOW_FOR_EACH_LOOP'
    FIELD_MAPPING = 'FIELD_MAPPING'
    README = 'README'
    REST_CALLER = 'REST_CALLER'
    SUB_WORKFLOW_SCATTER_GATHER = 'SUB_WORKFLOW_SCATTER_GATHER'
    CLOUD_SQL = 'CLOUD_SQL'
    GENERIC_CONNECTOR_TASK = 'GENERIC_CONNECTOR_TASK'


class EnterpriseCrmEventbusProtoTaskUiModuleConfig(BaseModel):
    moduleId: Optional[ModuleId] = Field(None, description='ID of the config module.')


class EnterpriseCrmEventbusProtoToken(BaseModel):
    name: Optional[str] = None
    value: Optional[str] = None


class EnterpriseCrmEventbusProtoValueType(BaseModel):
    booleanValue: Optional[bool] = None
    doubleArray: Optional[EnterpriseCrmEventbusProtoDoubleArray] = None
    doubleValue: Optional[float] = None
    intArray: Optional[EnterpriseCrmEventbusProtoIntArray] = None
    intValue: Optional[str] = None
    protoValue: Optional[Dict[str, Any]] = None
    stringArray: Optional[EnterpriseCrmEventbusProtoStringArray] = None
    stringValue: Optional[str] = None


class MetricType1(Enum):
    METRIC_TYPE_UNSPECIFIED = 'METRIC_TYPE_UNSPECIFIED'
    EVENT_ERROR_RATE = 'EVENT_ERROR_RATE'
    EVENT_WARNING_RATE = 'EVENT_WARNING_RATE'
    TASK_ERROR_RATE = 'TASK_ERROR_RATE'
    TASK_WARNING_RATE = 'TASK_WARNING_RATE'
    TASK_RATE = 'TASK_RATE'
    EVENT_RATE = 'EVENT_RATE'
    EVENT_AVERAGE_DURATION = 'EVENT_AVERAGE_DURATION'
    EVENT_PERCENTILE_DURATION = 'EVENT_PERCENTILE_DURATION'
    TASK_AVERAGE_DURATION = 'TASK_AVERAGE_DURATION'
    TASK_PERCENTILE_DURATION = 'TASK_PERCENTILE_DURATION'


class EnterpriseCrmEventbusProtoWorkflowAlertConfig(BaseModel):
    aggregationPeriod: Optional[str] = Field(
        None,
        description='For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.',
    )
    alertDisabled: Optional[bool] = Field(
        None,
        description='Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this workflow alert.',
    )
    alertName: Optional[str] = Field(
        None,
        description='A name to identify this alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the workflow.',
    )
    clientId: Optional[str] = Field(
        None, description='Client associated with this alert configuration.'
    )
    durationThresholdMs: Optional[str] = Field(
        None,
        description='Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.',
    )
    errorEnumList: Optional[EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumList] = (
        None
    )
    metricType: Optional[MetricType1] = None
    numAggregationPeriods: Optional[int] = Field(
        None,
        description='For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.',
    )
    onlyFinalAttempt: Optional[bool] = Field(
        None,
        description='For either events or tasks, depending on the type of alert, count only final attempts, not retries.',
    )
    playbookUrl: Optional[str] = Field(
        None,
        description='Link to a playbook for resolving the issue that triggered this alert.',
    )
    thresholdType: Optional[ThresholdType] = Field(
        None,
        description='The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.',
    )
    thresholdValue: Optional[
        EnterpriseCrmEventbusProtoBaseAlertConfigThresholdValue
    ] = Field(
        None,
        description='The metric value, above or below which the alert should be triggered.',
    )
    warningEnumList: Optional[
        EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumList
    ] = None


class EnumFilterType(Enum):
    DEFAULT_INCLUSIVE = 'DEFAULT_INCLUSIVE'
    EXCLUSIVE = 'EXCLUSIVE'


class RetryAttempt(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    FINAL = 'FINAL'
    RETRYABLE = 'RETRYABLE'
    CANCELED = 'CANCELED'


class EnterpriseCrmEventbusStatsDimensions(BaseModel):
    clientId: Optional[str] = None
    enumFilterType: Optional[EnumFilterType] = Field(
        None, description='Whether to include or exclude the enums matching the regex.'
    )
    errorEnumString: Optional[str] = None
    retryAttempt: Optional[RetryAttempt] = None
    taskName: Optional[str] = None
    taskNumber: Optional[str] = None
    triggerId: Optional[str] = Field(
        None,
        description='Stats have been or will be aggregated on set fields for any semantically-meaningful combination.',
    )
    warningEnumString: Optional[str] = None
    workflowId: Optional[str] = None
    workflowName: Optional[str] = None


class EnterpriseCrmFrontendsEventbusProtoBooleanParameterArray(BaseModel):
    booleanValues: Optional[List[bool]] = None


class EnterpriseCrmFrontendsEventbusProtoDoubleParameterArray(BaseModel):
    doubleValues: Optional[List[float]] = None


class PostMethod(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    POST = 'POST'
    POST_TO_QUEUE = 'POST_TO_QUEUE'
    SCHEDULE = 'SCHEDULE'
    POST_BY_EVENT_CONFIG_ID = 'POST_BY_EVENT_CONFIG_ID'
    POST_WITH_EVENT_DETAILS = 'POST_WITH_EVENT_DETAILS'


class EnterpriseCrmFrontendsEventbusProtoIntParameterArray(BaseModel):
    intValues: Optional[List[str]] = None


class DataType1(Enum):
    DATA_TYPE_UNSPECIFIED = 'DATA_TYPE_UNSPECIFIED'
    STRING_VALUE = 'STRING_VALUE'
    INT_VALUE = 'INT_VALUE'
    DOUBLE_VALUE = 'DOUBLE_VALUE'
    BOOLEAN_VALUE = 'BOOLEAN_VALUE'
    PROTO_VALUE = 'PROTO_VALUE'
    SERIALIZED_OBJECT_VALUE = 'SERIALIZED_OBJECT_VALUE'
    STRING_ARRAY = 'STRING_ARRAY'
    INT_ARRAY = 'INT_ARRAY'
    DOUBLE_ARRAY = 'DOUBLE_ARRAY'
    PROTO_ARRAY = 'PROTO_ARRAY'
    PROTO_ENUM = 'PROTO_ENUM'
    BOOLEAN_ARRAY = 'BOOLEAN_ARRAY'
    PROTO_ENUM_ARRAY = 'PROTO_ENUM_ARRAY'
    BYTES = 'BYTES'
    BYTES_ARRAY = 'BYTES_ARRAY'
    NON_SERIALIZABLE_OBJECT = 'NON_SERIALIZABLE_OBJECT'
    JSON_VALUE = 'JSON_VALUE'


class EnterpriseCrmFrontendsEventbusProtoProtoParameterArray(BaseModel):
    protoValues: Optional[List[Dict[str, Any]]] = None


class EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameter(BaseModel):
    objectValue: Optional[str] = None


class EnterpriseCrmFrontendsEventbusProtoStringParameterArray(BaseModel):
    stringValues: Optional[List[str]] = None


class ExternalTaskType(Enum):
    EXTERNAL_TASK_TYPE_UNSPECIFIED = 'EXTERNAL_TASK_TYPE_UNSPECIFIED'
    NORMAL_TASK = 'NORMAL_TASK'
    ERROR_TASK = 'ERROR_TASK'


class JsonValidationOption(Enum):
    UNSPECIFIED_JSON_VALIDATION_OPTION = 'UNSPECIFIED_JSON_VALIDATION_OPTION'
    SKIP = 'SKIP'
    PRE_EXECUTION = 'PRE_EXECUTION'
    POST_EXECUTION = 'POST_EXECUTION'
    PRE_POST_EXECUTION = 'PRE_POST_EXECUTION'


class NextTasksExecutionPolicy(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    RUN_ALL_MATCH = 'RUN_ALL_MATCH'
    RUN_FIRST_MATCH = 'RUN_FIRST_MATCH'


class TaskExecutionStrategy(Enum):
    WHEN_ALL_SUCCEED = 'WHEN_ALL_SUCCEED'
    WHEN_ANY_SUCCEED = 'WHEN_ANY_SUCCEED'
    WHEN_ALL_TASKS_AND_CONDITIONS_SUCCEED = 'WHEN_ALL_TASKS_AND_CONDITIONS_SUCCEED'


class TaskType(Enum):
    TASK = 'TASK'
    ASIS_TEMPLATE = 'ASIS_TEMPLATE'
    IO_TEMPLATE = 'IO_TEMPLATE'


class TriggerType(Enum):
    UNKNOWN = 'UNKNOWN'
    CLOUD_PUBSUB = 'CLOUD_PUBSUB'
    GOOPS = 'GOOPS'
    SFDC_SYNC = 'SFDC_SYNC'
    CRON = 'CRON'
    API = 'API'
    MANIFOLD_TRIGGER = 'MANIFOLD_TRIGGER'
    DATALAYER_DATA_CHANGE = 'DATALAYER_DATA_CHANGE'
    SFDC_CHANNEL = 'SFDC_CHANNEL'
    CLOUD_PUBSUB_EXTERNAL = 'CLOUD_PUBSUB_EXTERNAL'
    SFDC_CDC_CHANNEL = 'SFDC_CDC_CHANNEL'
    SFDC_PLATFORM_EVENTS_CHANNEL = 'SFDC_PLATFORM_EVENTS_CHANNEL'
    CLOUD_SCHEDULER = 'CLOUD_SCHEDULER'


class InOutType(Enum):
    IN_OUT_TYPE_UNSPECIFIED = 'IN_OUT_TYPE_UNSPECIFIED'
    IN = 'IN'
    OUT = 'OUT'
    IN_OUT = 'IN_OUT'


class LogAction(Enum):
    LOG_ACTION_UNSPECIFIED = 'LOG_ACTION_UNSPECIFIED'
    DONT_LOG = 'DONT_LOG'
    LOG = 'LOG'


class LogTypeEnum(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    GWS = 'GWS'
    GTS = 'GTS'
    ALL = 'ALL'


class ShortenerType(Enum):
    SHORTENER_TYPE_UNSPECIFIED = 'SHORTENER_TYPE_UNSPECIFIED'
    SHORTEN = 'SHORTEN'
    HASH = 'HASH'
    SHORTEN_WITH_HASH = 'SHORTEN_WITH_HASH'
    SHORTEN_EMAIL = 'SHORTEN_EMAIL'
    SHORTEN_EMAIL_WITH_HASH = 'SHORTEN_EMAIL_WITH_HASH'
    SHORTEN_DOMAIN = 'SHORTEN_DOMAIN'


class EnterpriseCrmLoggingGwsFieldLimits(BaseModel):
    logAction: Optional[LogAction] = None
    logType: Optional[List[LogTypeEnum]] = Field(
        None, description='To which type(s) of logs the limits apply.'
    )
    maxArraySize: Optional[int] = Field(
        None,
        description='maximum array size. If the array exceds this size, the field (list) is truncated.',
    )
    maxStringLength: Optional[int] = Field(
        None,
        description='maximum string length. If the field exceeds this amount the field is shortened.',
    )
    shortenerType: Optional[ShortenerType] = None


class Privacy(Enum):
    PRIVACY_TYPE_UNSPECIFIED = 'PRIVACY_TYPE_UNSPECIFIED'
    NOT_PII = 'NOT_PII'
    PII = 'PII'
    SPII = 'SPII'
    UNSURE = 'UNSURE'


class SanitizeType(Enum):
    SANITIZE_TYPE_UNSPECIFIED = 'SANITIZE_TYPE_UNSPECIFIED'
    SCRUB = 'SCRUB'
    ANONYMIZE = 'ANONYMIZE'
    ANONYMIZE_LIMITED_REPEATABLE = 'ANONYMIZE_LIMITED_REPEATABLE'
    OBFUSCATE = 'OBFUSCATE'
    ENCRYPT = 'ENCRYPT'
    DO_NOT_SANITIZE = 'DO_NOT_SANITIZE'


class EnterpriseCrmLoggingGwsSanitizeOptions(BaseModel):
    isAlreadySanitized: Optional[bool] = Field(
        None,
        description='If true, the value has already been sanitized and needs no further sanitization. For instance, a D3 customer id is already an obfuscated entity and *might not* need further sanitization.',
    )
    logType: Optional[List[LogTypeEnum]] = Field(
        None, description='To which type(s) of logs the sanitize options apply.'
    )
    privacy: Optional[Privacy] = None
    sanitizeType: Optional[SanitizeType] = None


class AuthType(Enum):
    AUTH_TYPE_UNSPECIFIED = 'AUTH_TYPE_UNSPECIFIED'
    USER_PASSWORD = 'USER_PASSWORD'
    OAUTH2_JWT_BEARER = 'OAUTH2_JWT_BEARER'
    OAUTH2_CLIENT_CREDENTIALS = 'OAUTH2_CLIENT_CREDENTIALS'
    SSH_PUBLIC_KEY = 'SSH_PUBLIC_KEY'
    OAUTH2_AUTH_CODE_FLOW = 'OAUTH2_AUTH_CODE_FLOW'


class GoogleCloudConnectorsV1AuthConfigOauth2JwtBearerJwtClaims(BaseModel):
    audience: Optional[str] = Field(None, description='Value for the "aud" claim.')
    issuer: Optional[str] = Field(None, description='Value for the "iss" claim.')
    subject: Optional[str] = Field(None, description='Value for the "sub" claim.')


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'
    ERROR = 'ERROR'
    AUTHORIZATION_REQUIRED = 'AUTHORIZATION_REQUIRED'


class GoogleCloudConnectorsV1ConnectionStatus(BaseModel):
    description: Optional[str] = Field(None, description='Description.')
    state: Optional[State] = Field(None, description='State.')
    status: Optional[str] = Field(
        None, description='Status provides detailed information for the state.'
    )


class GoogleCloudConnectorsV1Destination(BaseModel):
    host: Optional[str] = Field(None, description='For publicly routable host.')
    port: Optional[int] = Field(
        None,
        description='The port is the target port number that is accepted by the destination.',
    )
    serviceAttachment: Optional[str] = Field(
        None,
        description='PSC service attachments. Format: projects/*/regions/*/serviceAttachments/*',
    )


class GoogleCloudConnectorsV1DestinationConfig(BaseModel):
    destinations: Optional[List[GoogleCloudConnectorsV1Destination]] = Field(
        None, description='The destinations for the key.'
    )
    key: Optional[str] = Field(
        None,
        description='The key is the destination identifier that is supported by the Connector.',
    )


class GoogleCloudConnectorsV1LockConfig(BaseModel):
    locked: Optional[bool] = Field(
        None, description='Indicates whether or not the connection is locked.'
    )
    reason: Optional[str] = Field(
        None, description='Describes why a connection is locked.'
    )


class GoogleCloudConnectorsV1LogConfig(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Enabled represents whether logging is enabled or not for a connection.',
    )


class GoogleCloudConnectorsV1NodeConfig(BaseModel):
    maxNodeCount: Optional[int] = Field(
        None, description='Maximum number of nodes in the runtime nodes.'
    )
    minNodeCount: Optional[int] = Field(
        None, description='Minimum number of nodes in the runtime nodes.'
    )


class GoogleCloudConnectorsV1Secret(BaseModel):
    secretVersion: Optional[str] = Field(
        None,
        description='The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.',
    )


class ClientCertType(Enum):
    CERT_TYPE_UNSPECIFIED = 'CERT_TYPE_UNSPECIFIED'
    PEM = 'PEM'


class ServerCertType(Enum):
    CERT_TYPE_UNSPECIFIED = 'CERT_TYPE_UNSPECIFIED'
    PEM = 'PEM'


class TrustModel(Enum):
    PUBLIC = 'PUBLIC'
    PRIVATE = 'PRIVATE'
    INSECURE = 'INSECURE'


class Type(Enum):
    SSL_TYPE_UNSPECIFIED = 'SSL_TYPE_UNSPECIFIED'
    TLS = 'TLS'
    MTLS = 'MTLS'


class GoogleCloudIntegrationsV1alphaAccessToken(BaseModel):
    accessToken: Optional[str] = Field(
        None,
        description='The access token encapsulating the security identity of a process or thread.',
    )
    accessTokenExpireTime: Optional[str] = Field(
        None,
        description='Required. The approximate time until the access token retrieved is valid.',
    )
    refreshToken: Optional[str] = Field(
        None,
        description='If the access token will expire, use the refresh token to obtain another access token.',
    )
    refreshTokenExpireTime: Optional[str] = Field(
        None,
        description='The approximate time until the refresh token retrieved is valid.',
    )
    tokenType: Optional[str] = Field(
        None,
        description='Only support "bearer" token in v1 as bearer token is the predominant type used with OAuth 2.0.',
    )


class GoogleCloudIntegrationsV1alphaAttemptStats(BaseModel):
    endTime: Optional[str] = Field(
        None, description='The end time of the event execution for current attempt.'
    )
    startTime: Optional[str] = Field(
        None,
        description="The start time of the event execution for current attempt. This could be in the future if it's been scheduled.",
    )


class CredentialType(Enum):
    CREDENTIAL_TYPE_UNSPECIFIED = 'CREDENTIAL_TYPE_UNSPECIFIED'
    USERNAME_AND_PASSWORD = 'USERNAME_AND_PASSWORD'
    API_KEY = 'API_KEY'
    OAUTH2_AUTHORIZATION_CODE = 'OAUTH2_AUTHORIZATION_CODE'
    OAUTH2_IMPLICIT = 'OAUTH2_IMPLICIT'
    OAUTH2_CLIENT_CREDENTIALS = 'OAUTH2_CLIENT_CREDENTIALS'
    OAUTH2_RESOURCE_OWNER_CREDENTIALS = 'OAUTH2_RESOURCE_OWNER_CREDENTIALS'
    JWT = 'JWT'
    AUTH_TOKEN = 'AUTH_TOKEN'
    SERVICE_ACCOUNT = 'SERVICE_ACCOUNT'
    CLIENT_CERTIFICATE_ONLY = 'CLIENT_CERTIFICATE_ONLY'
    OIDC_TOKEN = 'OIDC_TOKEN'


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    VALID = 'VALID'
    INVALID = 'INVALID'
    SOFT_DELETED = 'SOFT_DELETED'
    EXPIRED = 'EXPIRED'
    UNAUTHORIZED = 'UNAUTHORIZED'
    UNSUPPORTED = 'UNSUPPORTED'


class Visibility(Enum):
    AUTH_CONFIG_VISIBILITY_UNSPECIFIED = 'AUTH_CONFIG_VISIBILITY_UNSPECIFIED'
    PRIVATE = 'PRIVATE'
    CLIENT_VISIBLE = 'CLIENT_VISIBLE'


class GoogleCloudIntegrationsV1alphaAuthToken(BaseModel):
    token: Optional[str] = Field(None, description='The token for the auth type.')
    type: Optional[str] = Field(
        None, description='Authentication type, e.g. "Basic", "Bearer", etc.'
    )


class GoogleCloudIntegrationsV1alphaBooleanParameterArray(BaseModel):
    booleanValues: Optional[List[bool]] = Field(None, description='Boolean array.')


class GoogleCloudIntegrationsV1alphaCancelExecutionRequest(BaseModel):
    pass


class GoogleCloudIntegrationsV1alphaCancelExecutionResponse(BaseModel):
    isCanceled: Optional[bool] = Field(
        None, description='True if cancellation performed successfully'
    )


class CertificateStatus(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    EXPIRED = 'EXPIRED'


class GoogleCloudIntegrationsV1alphaClientCertificate(BaseModel):
    encryptedPrivateKey: Optional[str] = Field(
        None,
        description='The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----',
    )
    passphrase: Optional[str] = Field(
        None,
        description="'passphrase' should be left unset if private key is not encrypted. Note that 'passphrase' is not the password for web server, but an extra layer of security to protected private key.",
    )
    sslCertificate: Optional[str] = Field(
        None,
        description='The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----',
    )


class BillingType(Enum):
    BILLING_TYPE_UNSPECIFIED = 'BILLING_TYPE_UNSPECIFIED'
    BILLING_TYPE_APIGEE_TRIALS = 'BILLING_TYPE_APIGEE_TRIALS'
    BILLING_TYPE_APIGEE_SUBSCRIPTION = 'BILLING_TYPE_APIGEE_SUBSCRIPTION'
    BILLING_TYPE_PAYG = 'BILLING_TYPE_PAYG'


class ClientState(Enum):
    CLIENT_STATE_UNSPECIFIED = 'CLIENT_STATE_UNSPECIFIED'
    CLIENT_STATE_ACTIVE = 'CLIENT_STATE_ACTIVE'
    CLIENT_STATE_DISABLED = 'CLIENT_STATE_DISABLED'


class GoogleCloudIntegrationsV1alphaCloudKmsConfig(BaseModel):
    key: Optional[str] = Field(
        None,
        description='Required. A Cloud KMS key is a named object containing one or more key versions, along with metadata for the key. A key exists on exactly one key ring tied to a specific location.',
    )
    keyVersion: Optional[str] = Field(
        None,
        description="Optional. Each version of a key contains key material used for encryption or signing. A key's version is represented by an integer, starting at 1. To decrypt data or verify a signature, you must use the same key version that was used to encrypt or sign the data.",
    )
    kmsLocation: Optional[str] = Field(
        None, description='Required. Location name of the key ring, e.g. "us-west1".'
    )
    kmsProjectId: Optional[str] = Field(
        None,
        description="Optional. The gcp project id of the project where the kms key stored. If empty, the kms key is stored at the same project as customer's project and ecrypted with CMEK, otherwise, the kms key is stored in the tenant project and encrypted with GMEK",
    )
    kmsRing: Optional[str] = Field(
        None,
        description="Required. A key ring organizes keys in a specific Google Cloud location and allows you to manage access control on groups of keys. A key ring's name does not need to be unique across a Google Cloud project, but must be unique within a given location.",
    )


class GoogleCloudIntegrationsV1alphaCloudLoggingConfig(BaseModel):
    bucket: Optional[str] = Field(
        None, description='Cloud bucket name for the project.'
    )
    enableCloudLogging: Optional[bool] = Field(
        None,
        description='This field determines whether the logs should be sent to cloud logging api',
    )


class GoogleCloudIntegrationsV1alphaCloudSchedulerConfig(BaseModel):
    cronTab: Optional[str] = Field(
        None, description='Required. The cron tab of cloud scheduler trigger.'
    )
    errorMessage: Optional[str] = Field(
        None,
        description='Optional. When the job was deleted from Pantheon UI, error_message will be populated when Get/List integrations',
    )
    location: Optional[str] = Field(
        None,
        description='Required. The location where associated cloud scheduler job will be created',
    )
    serviceAccountEmail: Optional[str] = Field(
        None,
        description='Required. Service account used by Cloud Scheduler to trigger the integration at scheduled time',
    )


class GoogleCloudIntegrationsV1alphaConnectionSchemaMetadata(BaseModel):
    actions: Optional[List[str]] = Field(None, description='List of actions.')
    entities: Optional[List[str]] = Field(None, description='List of entity names.')


class GoogleCloudIntegrationsV1alphaCoordinate(BaseModel):
    x: Optional[int] = Field(None, description='Required. X axis of the coordinate')
    y: Optional[int] = Field(None, description='Required. Y axis of the coordinate')


class GoogleCloudIntegrationsV1alphaCreateAppsScriptProjectRequest(BaseModel):
    appsScriptProject: Optional[str] = Field(
        None, description='The name of the Apps Script project to be created.'
    )
    authConfigId: Optional[str] = Field(
        None,
        description='The auth config id necessary to fetch the necessary credentials to create the project for external clients',
    )


class GoogleCloudIntegrationsV1alphaCreateAppsScriptProjectResponse(BaseModel):
    projectId: Optional[str] = Field(
        None, description='The created AppsScriptProject ID.'
    )


class GoogleCloudIntegrationsV1alphaCreateCloudFunctionRequest(BaseModel):
    functionName: Optional[str] = Field(
        None, description='The function name of CF to be created'
    )
    functionRegion: Optional[str] = Field(
        None, description='The function region of CF to be created'
    )
    projectId: Optional[str] = Field(
        None,
        description='Indicates the id of the GCP project that the function will be created in.',
    )


class GoogleCloudIntegrationsV1alphaCreateCloudFunctionResponse(BaseModel):
    triggerUrl: Optional[str] = Field(
        None, description='The trigger url that will be returned'
    )


class GoogleCloudIntegrationsV1alphaDeprovisionClientRequest(BaseModel):
    pass


class GoogleCloudIntegrationsV1alphaDoubleParameterArray(BaseModel):
    doubleValues: Optional[List[float]] = Field(
        None, description='Double number array.'
    )


class GoogleCloudIntegrationsV1alphaDownloadExecutionResponse(BaseModel):
    content: Optional[str] = Field(
        None, description='The content of downloaded execution.'
    )


class GoogleCloudIntegrationsV1alphaDownloadIntegrationVersionResponse(BaseModel):
    content: Optional[str] = Field(
        None, description='String representation of the integration version.'
    )


class GoogleCloudIntegrationsV1alphaEnumerateConnectorPlatformRegionsResponse(
    BaseModel
):
    regions: Optional[List[str]] = Field(
        None, description='All regions where Connector Platform is provisioned.'
    )


class ExecutionMethod(Enum):
    EXECUTION_METHOD_UNSPECIFIED = 'EXECUTION_METHOD_UNSPECIFIED'
    POST = 'POST'
    POST_TO_QUEUE = 'POST_TO_QUEUE'
    SCHEDULE = 'SCHEDULE'


class State2(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    PROCESSING = 'PROCESSING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'
    RETRY_ON_HOLD = 'RETRY_ON_HOLD'
    SUSPENDED = 'SUSPENDED'


class GoogleCloudIntegrationsV1alphaExecutionSnapshotExecutionSnapshotMetadata(
    BaseModel
):
    executionAttempt: Optional[int] = Field(
        None, description='the execution attempt number this snapshot belongs to.'
    )
    task: Optional[str] = Field(
        None, description='the task name associated with this snapshot.'
    )
    taskAttempt: Optional[int] = Field(
        None, description='the task attempt number this snapshot belongs to.'
    )
    taskLabel: Optional[str] = Field(
        None,
        description='the task label associated with this snapshot. Could be empty.',
    )
    taskNumber: Optional[str] = Field(
        None, description='The task number associated with this snapshot.'
    )


class RetryStrategy1(Enum):
    RETRY_STRATEGY_UNSPECIFIED = 'RETRY_STRATEGY_UNSPECIFIED'
    IGNORE = 'IGNORE'
    NONE = 'NONE'
    FATAL = 'FATAL'
    FIXED_INTERVAL = 'FIXED_INTERVAL'
    LINEAR_BACKOFF = 'LINEAR_BACKOFF'
    EXPONENTIAL_BACKOFF = 'EXPONENTIAL_BACKOFF'
    RESTART_INTEGRATION_WITH_BACKOFF = 'RESTART_INTEGRATION_WITH_BACKOFF'


class GoogleCloudIntegrationsV1alphaFailurePolicy(BaseModel):
    intervalTime: Optional[str] = Field(
        None,
        description='Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the initial interval in seconds for backoff.',
    )
    maxRetries: Optional[int] = Field(
        None,
        description='Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_INTEGRATION_WITH_BACKOFF. Defines the number of times the task will be retried if failed.',
    )
    retryStrategy: Optional[RetryStrategy1] = Field(
        None, description='Defines what happens to the task upon failure.'
    )


class GoogleCloudIntegrationsV1alphaGenerateTokenResponse(BaseModel):
    message: Optional[str] = Field(
        None,
        description='The message that notifies the user if the request succeeded or not.',
    )


class GoogleCloudIntegrationsV1alphaIntParameterArray(BaseModel):
    intValues: Optional[List[str]] = Field(None, description='Integer array.')


class GoogleCloudIntegrationsV1alphaIntegration(BaseModel):
    active: Optional[bool] = Field(
        None, description='Required. If any integration version is published.'
    )
    description: Optional[str] = Field(None, description='Optional.')
    name: Optional[str] = Field(
        None, description='Required. The resource name of the integration.'
    )
    updateTime: Optional[str] = Field(None, description='Output only. Auto-generated.')


class ThresholdType2(Enum):
    THRESHOLD_TYPE_UNSPECIFIED = 'THRESHOLD_TYPE_UNSPECIFIED'
    EXPECTED_MIN = 'EXPECTED_MIN'
    EXPECTED_MAX = 'EXPECTED_MAX'


class GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValue(BaseModel):
    absolute: Optional[str] = Field(None, description='Absolute value threshold.')
    percentage: Optional[int] = Field(None, description='Percentage threshold.')


class DataType4(Enum):
    INTEGRATION_PARAMETER_DATA_TYPE_UNSPECIFIED = (
        'INTEGRATION_PARAMETER_DATA_TYPE_UNSPECIFIED'
    )
    STRING_VALUE = 'STRING_VALUE'
    INT_VALUE = 'INT_VALUE'
    DOUBLE_VALUE = 'DOUBLE_VALUE'
    BOOLEAN_VALUE = 'BOOLEAN_VALUE'
    STRING_ARRAY = 'STRING_ARRAY'
    INT_ARRAY = 'INT_ARRAY'
    DOUBLE_ARRAY = 'DOUBLE_ARRAY'
    BOOLEAN_ARRAY = 'BOOLEAN_ARRAY'
    JSON_VALUE = 'JSON_VALUE'
    PROTO_VALUE = 'PROTO_VALUE'
    PROTO_ARRAY = 'PROTO_ARRAY'


class InputOutputType(Enum):
    IN_OUT_TYPE_UNSPECIFIED = 'IN_OUT_TYPE_UNSPECIFIED'
    IN = 'IN'
    OUT = 'OUT'
    IN_OUT = 'IN_OUT'


class DatabasePersistencePolicy(Enum):
    DATABASE_PERSISTENCE_POLICY_UNSPECIFIED = 'DATABASE_PERSISTENCE_POLICY_UNSPECIFIED'
    DATABASE_PERSISTENCE_DISABLED = 'DATABASE_PERSISTENCE_DISABLED'


class Origin(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    UI = 'UI'
    PIPER_V2 = 'PIPER_V2'
    PIPER_V3 = 'PIPER_V3'
    APPLICATION_IP_PROVISIONING = 'APPLICATION_IP_PROVISIONING'


class State3(Enum):
    INTEGRATION_STATE_UNSPECIFIED = 'INTEGRATION_STATE_UNSPECIFIED'
    DRAFT = 'DRAFT'
    ACTIVE = 'ACTIVE'
    ARCHIVED = 'ARCHIVED'
    SNAPSHOT = 'SNAPSHOT'


class Status2(Enum):
    UNKNOWN = 'UNKNOWN'
    DRAFT = 'DRAFT'
    ACTIVE = 'ACTIVE'
    ARCHIVED = 'ARCHIVED'
    SNAPSHOT = 'SNAPSHOT'


class GoogleCloudIntegrationsV1alphaJwt(BaseModel):
    jwt: Optional[str] = Field(
        None, description='The token calculated by the header, payload and signature.'
    )
    jwtHeader: Optional[str] = Field(
        None,
        description='Identifies which algorithm is used to generate the signature.',
    )
    jwtPayload: Optional[str] = Field(
        None,
        description='Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.',
    )
    secret: Optional[str] = Field(
        None, description="User's pre-shared secret to sign the token."
    )


class GoogleCloudIntegrationsV1alphaLiftSuspensionRequest(BaseModel):
    suspensionResult: Optional[str] = Field(
        None,
        description='User passed in suspension result and will be used to control workflow execution branching behavior by setting up corresponnding edge condition with suspension result. For example, if you want to lift the suspension, you can pass "Approved", or if you want to reject the suspension and terminate workfloe execution, you can pass "Rejected" and terminate the workflow execution with configuring the edge condition.',
    )


class GoogleCloudIntegrationsV1alphaLiftSuspensionResponse(BaseModel):
    eventExecutionInfoId: Optional[str] = Field(
        None, description='Execution Id that will be returned'
    )


class GoogleCloudIntegrationsV1alphaLinkAppsScriptProjectRequest(BaseModel):
    scriptId: Optional[str] = Field(
        None, description='The id of the Apps Script project to be linked.'
    )


class GoogleCloudIntegrationsV1alphaLinkAppsScriptProjectResponse(BaseModel):
    scriptId: Optional[str] = Field(
        None, description='The id of the linked Apps Script project.'
    )


class GoogleCloudIntegrationsV1alphaListIntegrationsResponse(BaseModel):
    integrations: Optional[List[GoogleCloudIntegrationsV1alphaIntegration]] = Field(
        None, description='The integrations which match the request.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='The next page token for the response.'
    )


class GoogleCloudIntegrationsV1alphaNextTask(BaseModel):
    condition: Optional[str] = Field(
        None,
        description='Standard filter expression for this task to become an eligible next task.',
    )
    description: Optional[str] = Field(
        None,
        description='User-provided description intended to give additional business context about the task.',
    )
    displayName: Optional[str] = Field(
        None, description='User-provided label that is attached to this edge in the UI.'
    )
    taskConfigId: Optional[str] = Field(None, description='ID of the next task.')
    taskId: Optional[str] = Field(None, description='Task number of the next task.')


class RequestType(Enum):
    REQUEST_TYPE_UNSPECIFIED = 'REQUEST_TYPE_UNSPECIFIED'
    REQUEST_BODY = 'REQUEST_BODY'
    QUERY_PARAMETERS = 'QUERY_PARAMETERS'
    ENCODED_HEADER = 'ENCODED_HEADER'


class GoogleCloudIntegrationsV1alphaOidcToken(BaseModel):
    audience: Optional[str] = Field(
        None,
        description='Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for.',
    )
    serviceAccountEmail: Optional[str] = Field(
        None,
        description='The service account email to be used as the identity for the token.',
    )
    token: Optional[str] = Field(
        None, description='ID token obtained for the service account'
    )
    tokenExpireTime: Optional[str] = Field(
        None, description='The approximate time until the token retrieved is valid.'
    )


class KeyType2(Enum):
    INTEGRATION_PARAMETER_DATA_TYPE_UNSPECIFIED = (
        'INTEGRATION_PARAMETER_DATA_TYPE_UNSPECIFIED'
    )
    STRING_VALUE = 'STRING_VALUE'
    INT_VALUE = 'INT_VALUE'
    DOUBLE_VALUE = 'DOUBLE_VALUE'
    BOOLEAN_VALUE = 'BOOLEAN_VALUE'
    STRING_ARRAY = 'STRING_ARRAY'
    INT_ARRAY = 'INT_ARRAY'
    DOUBLE_ARRAY = 'DOUBLE_ARRAY'
    BOOLEAN_ARRAY = 'BOOLEAN_ARRAY'
    JSON_VALUE = 'JSON_VALUE'
    PROTO_VALUE = 'PROTO_VALUE'
    PROTO_ARRAY = 'PROTO_ARRAY'


class ValueType2(Enum):
    INTEGRATION_PARAMETER_DATA_TYPE_UNSPECIFIED = (
        'INTEGRATION_PARAMETER_DATA_TYPE_UNSPECIFIED'
    )
    STRING_VALUE = 'STRING_VALUE'
    INT_VALUE = 'INT_VALUE'
    DOUBLE_VALUE = 'DOUBLE_VALUE'
    BOOLEAN_VALUE = 'BOOLEAN_VALUE'
    STRING_ARRAY = 'STRING_ARRAY'
    INT_ARRAY = 'INT_ARRAY'
    DOUBLE_ARRAY = 'DOUBLE_ARRAY'
    BOOLEAN_ARRAY = 'BOOLEAN_ARRAY'
    JSON_VALUE = 'JSON_VALUE'
    PROTO_VALUE = 'PROTO_VALUE'
    PROTO_ARRAY = 'PROTO_ARRAY'


class IpEnablementState(Enum):
    IP_ENABLEMENT_STATE_UNSPECIFIED = 'IP_ENABLEMENT_STATE_UNSPECIFIED'
    IP_ENABLEMENT_STATE_STANDALONE = 'IP_ENABLEMENT_STATE_STANDALONE'
    IP_ENABLEMENT_STATE_APIGEE = 'IP_ENABLEMENT_STATE_APIGEE'
    IP_ENABLEMENT_STATE_APIGEE_ENTITLED = 'IP_ENABLEMENT_STATE_APIGEE_ENTITLED'


class GoogleCloudIntegrationsV1alphaProjectProperties(BaseModel):
    ipEnablementState: Optional[IpEnablementState] = Field(
        None,
        description='An enum value of what the enablement state is for the given project',
    )
    provisionedRegions: Optional[List[str]] = Field(
        None, description='A list of provisioned regions on the current project'
    )


class GoogleCloudIntegrationsV1alphaProvisionClientRequest(BaseModel):
    cloudKmsConfig: Optional[GoogleCloudIntegrationsV1alphaCloudKmsConfig] = Field(
        None,
        description='Optional. OPTIONAL: Cloud KMS config for AuthModule to encrypt/decrypt credentials.',
    )
    createSampleWorkflows: Optional[bool] = Field(
        None,
        description='Optional. Indicates if sample workflow should be created along with provisioning',
    )
    provisionGmek: Optional[bool] = Field(
        None, description='Optional. Indicates provision with GMEK or CMEK'
    )


class GoogleCloudIntegrationsV1alphaPublishIntegrationVersionRequest(BaseModel):
    pass


class GoogleCloudIntegrationsV1alphaPublishIntegrationVersionResponse(BaseModel):
    pass


class GoogleCloudIntegrationsV1alphaResolveSuspensionResponse(BaseModel):
    pass


class GoogleCloudIntegrationsV1alphaRuntimeActionSchema(BaseModel):
    action: Optional[str] = Field(None, description='Name of the action.')
    inputSchema: Optional[str] = Field(
        None, description='Input parameter schema for the action.'
    )
    outputSchema: Optional[str] = Field(
        None, description='Output parameter schema for the action.'
    )


class GoogleCloudIntegrationsV1alphaRuntimeEntitySchema(BaseModel):
    arrayFieldSchema: Optional[str] = Field(
        None, description='The above schema, but for an array of the associated entity.'
    )
    entity: Optional[str] = Field(None, description='Name of the entity.')
    fieldSchema: Optional[str] = Field(
        None, description='List of fields in the entity.'
    )


class GoogleCloudIntegrationsV1alphaScheduleIntegrationsResponse(BaseModel):
    executionInfoIds: Optional[List[str]] = Field(
        None, description='The execution info id for the executed integrations.'
    )


class GoogleCloudIntegrationsV1alphaServiceAccountCredentials(BaseModel):
    scope: Optional[str] = Field(
        None, description='A space-delimited list of requested scope permissions.'
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='Name of the service account that has the permission to make the request.',
    )


class GoogleCloudIntegrationsV1alphaSfdcChannel(BaseModel):
    channelTopic: Optional[str] = Field(
        None,
        description='The Channel topic defined by salesforce once an channel is opened',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time when the channel is created'
    )
    deleteTime: Optional[str] = Field(
        None,
        description='Output only. Time when the channel was deleted. Empty if not deleted.',
    )
    description: Optional[str] = Field(
        None, description='The description for this channel'
    )
    displayName: Optional[str] = Field(
        None,
        description='Client level unique name/alias to easily reference a channel.',
    )
    isActive: Optional[bool] = Field(
        None,
        description='Indicated if a channel has any active integrations referencing it. Set to false when the channel is created, and set to true if there is any integration published with the channel configured in it.',
    )
    lastReplayId: Optional[str] = Field(
        None, description='Last sfdc messsage replay id for channel'
    )
    name: Optional[str] = Field(
        None,
        description='Resource name of the SFDC channel projects/{project}/locations/{location}/sfdcInstances/{sfdc_instance}/sfdcChannels/{sfdc_channel}.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Time when the channel was last updated'
    )


class GoogleCloudIntegrationsV1alphaSfdcInstance(BaseModel):
    authConfigId: Optional[List[str]] = Field(
        None,
        description='A list of AuthConfigs that can be tried to open the channel to SFDC',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time when the instance is created'
    )
    deleteTime: Optional[str] = Field(
        None,
        description='Output only. Time when the instance was deleted. Empty if not deleted.',
    )
    description: Optional[str] = Field(
        None, description='A description of the sfdc instance.'
    )
    displayName: Optional[str] = Field(
        None,
        description='User selected unique name/alias to easily reference an instance.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name of the SFDC instance projects/{project}/locations/{location}/sfdcInstances/{sfdcInstance}.',
    )
    serviceAuthority: Optional[str] = Field(
        None,
        description='URL used for API calls after authentication (the login authority is configured within the referenced AuthConfig).',
    )
    sfdcOrgId: Optional[str] = Field(
        None, description='The SFDC Org Id. This is defined in salesforce.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Time when the instance was last updated'
    )


class GoogleCloudIntegrationsV1alphaStringParameterArray(BaseModel):
    stringValues: Optional[List[str]] = Field(None, description='String array.')


class FinalState1(Enum):
    FINAL_STATE_UNSPECIFIED = 'FINAL_STATE_UNSPECIFIED'
    SUCCEEDED = 'SUCCEEDED'
    SUSPENDED = 'SUSPENDED'


class GoogleCloudIntegrationsV1alphaSuccessPolicy(BaseModel):
    finalState: Optional[FinalState1] = Field(
        None,
        description='State to which the execution snapshot status will be set if the task succeeds.',
    )


class State4(Enum):
    RESOLUTION_STATE_UNSPECIFIED = 'RESOLUTION_STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    REJECTED = 'REJECTED'
    LIFTED = 'LIFTED'


class GoogleCloudIntegrationsV1alphaSuspensionApprovalExpiration(BaseModel):
    expireTime: Optional[str] = Field(
        None,
        description='Output only. Time after which the suspension expires, if no action taken.',
    )
    liftWhenExpired: Optional[bool] = Field(
        None,
        description='Whether the suspension will be REJECTED or LIFTED upon expiration. REJECTED is the default behavior.',
    )
    remindTime: Optional[str] = Field(
        None,
        description='Time after the previous suspension action reminder, if any, is sent using the selected notification option, for a suspension which is still PENDING_UNSPECIFIED.',
    )


class GoogleCloudIntegrationsV1alphaSuspensionAudit(BaseModel):
    resolveTime: Optional[str] = Field(
        None, description='Time at which this suspension was resolved.'
    )
    resolver: Optional[str] = Field(
        None, description='Email address of the person who resolved this suspension.'
    )


class GoogleCloudIntegrationsV1alphaSwitchEncryptionRequest(BaseModel):
    cloudKmsConfig: Optional[GoogleCloudIntegrationsV1alphaCloudKmsConfig] = Field(
        None,
        description='Required. REQUIRED: Cloud KMS config for AuthModule to encrypt/decrypt credentials.',
    )


class GoogleCloudIntegrationsV1alphaTakeoverEditLockRequest(BaseModel):
    pass


class JsonValidationOption1(Enum):
    JSON_VALIDATION_OPTION_UNSPECIFIED = 'JSON_VALIDATION_OPTION_UNSPECIFIED'
    SKIP = 'SKIP'
    PRE_EXECUTION = 'PRE_EXECUTION'
    POST_EXECUTION = 'POST_EXECUTION'
    PRE_POST_EXECUTION = 'PRE_POST_EXECUTION'


class NextTasksExecutionPolicy2(Enum):
    NEXT_TASKS_EXECUTION_POLICY_UNSPECIFIED = 'NEXT_TASKS_EXECUTION_POLICY_UNSPECIFIED'
    RUN_ALL_MATCH = 'RUN_ALL_MATCH'
    RUN_FIRST_MATCH = 'RUN_FIRST_MATCH'


class TaskExecutionStrategy1(Enum):
    TASK_EXECUTION_STRATEGY_UNSPECIFIED = 'TASK_EXECUTION_STRATEGY_UNSPECIFIED'
    WHEN_ALL_SUCCEED = 'WHEN_ALL_SUCCEED'
    WHEN_ANY_SUCCEED = 'WHEN_ANY_SUCCEED'
    WHEN_ALL_TASKS_AND_CONDITIONS_SUCCEED = 'WHEN_ALL_TASKS_AND_CONDITIONS_SUCCEED'


class TaskExecutionState1(Enum):
    TASK_EXECUTION_STATE_UNSPECIFIED = 'TASK_EXECUTION_STATE_UNSPECIFIED'
    PENDING_EXECUTION = 'PENDING_EXECUTION'
    IN_PROCESS = 'IN_PROCESS'
    SUCCEED = 'SUCCEED'
    FAILED = 'FAILED'
    FATAL = 'FATAL'
    RETRY_ON_HOLD = 'RETRY_ON_HOLD'
    SKIPPED = 'SKIPPED'
    CANCELLED = 'CANCELLED'
    PENDING_ROLLBACK = 'PENDING_ROLLBACK'
    ROLLBACK_IN_PROCESS = 'ROLLBACK_IN_PROCESS'
    ROLLEDBACK = 'ROLLEDBACK'
    SUSPENDED = 'SUSPENDED'


class GoogleCloudIntegrationsV1alphaTaskExecutionDetails(BaseModel):
    taskAttemptStats: Optional[List[GoogleCloudIntegrationsV1alphaAttemptStats]] = (
        Field(None, description='Status for the current task execution attempt.')
    )
    taskExecutionState: Optional[TaskExecutionState1] = Field(
        None, description='The execution state of this task.'
    )
    taskNumber: Optional[str] = Field(
        None, description='Pointer to the task config it used for execution.'
    )


class TriggerType1(Enum):
    TRIGGER_TYPE_UNSPECIFIED = 'TRIGGER_TYPE_UNSPECIFIED'
    CRON = 'CRON'
    API = 'API'
    SFDC_CHANNEL = 'SFDC_CHANNEL'
    CLOUD_PUBSUB_EXTERNAL = 'CLOUD_PUBSUB_EXTERNAL'
    SFDC_CDC_CHANNEL = 'SFDC_CDC_CHANNEL'
    CLOUD_SCHEDULER = 'CLOUD_SCHEDULER'


class GoogleCloudIntegrationsV1alphaUnpublishIntegrationVersionRequest(BaseModel):
    pass


class FileFormat(Enum):
    FILE_FORMAT_UNSPECIFIED = 'FILE_FORMAT_UNSPECIFIED'
    JSON = 'JSON'
    YAML = 'YAML'


class GoogleCloudIntegrationsV1alphaUploadIntegrationVersionRequest(BaseModel):
    content: Optional[str] = Field(
        None, description='The textproto of the integration_version.'
    )
    fileFormat: Optional[FileFormat] = Field(
        None, description='File format for upload request.'
    )


class GoogleCloudIntegrationsV1alphaUsernameAndPassword(BaseModel):
    password: Optional[str] = Field(None, description='Password to be used')
    username: Optional[str] = Field(None, description='Username to be used')


class GoogleCloudIntegrationsV1alphaValueType(BaseModel):
    booleanArray: Optional[GoogleCloudIntegrationsV1alphaBooleanParameterArray] = Field(
        None, description='Boolean Array.'
    )
    booleanValue: Optional[bool] = Field(None, description='Boolean.')
    doubleArray: Optional[GoogleCloudIntegrationsV1alphaDoubleParameterArray] = Field(
        None, description='Double Number Array.'
    )
    doubleValue: Optional[float] = Field(None, description='Double Number.')
    intArray: Optional[GoogleCloudIntegrationsV1alphaIntParameterArray] = Field(
        None, description='Integer Array.'
    )
    intValue: Optional[str] = Field(None, description='Integer.')
    jsonValue: Optional[str] = Field(None, description='Json.')
    stringArray: Optional[GoogleCloudIntegrationsV1alphaStringParameterArray] = Field(
        None, description='String Array.'
    )
    stringValue: Optional[str] = Field(None, description='String.')


class Priority(Enum):
    UNSPCIFIED = 'UNSPCIFIED'
    SHEDDABLE = 'SHEDDABLE'
    SHEDDABLE_PLUS = 'SHEDDABLE_PLUS'
    CRITICAL = 'CRITICAL'
    CRITICAL_PLUS = 'CRITICAL_PLUS'


class GoogleProtobufEmpty(BaseModel):
    pass


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class FilterParamsEventStatuses(RootModel[List[str]]):
    root: List[str]


class FilterParamsTaskStatuses(RootModel[List[str]]):
    root: List[str]


class EnterpriseCrmEventbusProtoAddress(BaseModel):
    email: Optional[str] = Field(None, description='Required.')
    name: Optional[str] = None
    tokens: Optional[List[EnterpriseCrmEventbusProtoToken]] = None


class EnterpriseCrmEventbusProtoCondition(BaseModel):
    eventPropertyKey: Optional[str] = Field(
        None,
        description="Key that's evaluated against the `value`. Please note the data type of the runtime value associated with the key should match the data type of `value`, else an IllegalArgumentException is thrown.",
    )
    operator: Optional[Operator] = Field(
        None,
        description='Operator used to evaluate the condition. Please note that an operator with an inappropriate key/value operand will result in IllegalArgumentException, e.g. CONTAINS with boolean key/value pair.',
    )
    value: Optional[EnterpriseCrmEventbusProtoValueType] = Field(
        None, description="Value that's checked for the key."
    )


class EnterpriseCrmEventbusProtoFunctionType(BaseModel):
    baseFunction: Optional[EnterpriseCrmEventbusProtoBaseFunction] = Field(
        None, description='LINT.IfChange'
    )
    booleanArrayFunction: Optional[EnterpriseCrmEventbusProtoBooleanArrayFunction] = (
        None
    )
    booleanFunction: Optional[EnterpriseCrmEventbusProtoBooleanFunction] = None
    doubleArrayFunction: Optional[EnterpriseCrmEventbusProtoDoubleArrayFunction] = None
    doubleFunction: Optional[EnterpriseCrmEventbusProtoDoubleFunction] = None
    intArrayFunction: Optional[EnterpriseCrmEventbusProtoIntArrayFunction] = None
    intFunction: Optional[EnterpriseCrmEventbusProtoIntFunction] = None
    jsonFunction: Optional[EnterpriseCrmEventbusProtoJsonFunction] = Field(
        None,
        description='LINT.ThenChange(//depot/google3/alkali/apps/integrationplatform/client/workflow_editor/utils/transform_function.ts)',
    )
    protoArrayFunction: Optional[EnterpriseCrmEventbusProtoProtoArrayFunction] = None
    protoFunction: Optional[EnterpriseCrmEventbusProtoProtoFunction] = None
    stringArrayFunction: Optional[EnterpriseCrmEventbusProtoStringArrayFunction] = None
    stringFunction: Optional[EnterpriseCrmEventbusProtoStringFunction] = None


class EnterpriseCrmEventbusProtoLogSettings(BaseModel):
    logFieldName: Optional[str] = Field(
        None,
        description='The name of corresponding logging field of the event property. If omitted, assumes the same name as the event property key.',
    )
    sanitizeOptions: Optional[EnterpriseCrmLoggingGwsSanitizeOptions] = Field(
        None,
        description='Contains the scrubbing options, such as whether to scrub, obfuscate, etc.',
    )
    seedPeriod: Optional[SeedPeriod] = None
    seedScope: Optional[SeedScope] = None
    shorteningLimits: Optional[EnterpriseCrmLoggingGwsFieldLimits] = Field(
        None,
        description='Contains the field limits for shortening, such as max string length and max array length.',
    )


class EnterpriseCrmEventbusProtoParamSpecEntryValidationRule(BaseModel):
    doubleRange: Optional[
        EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleDoubleRange
    ] = None
    intRange: Optional[
        EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleIntRange
    ] = None
    stringRegex: Optional[
        EnterpriseCrmEventbusProtoParamSpecEntryValidationRuleStringRegex
    ] = None


class EnterpriseCrmEventbusProtoParameterValueType(BaseModel):
    booleanArray: Optional[EnterpriseCrmEventbusProtoBooleanParameterArray] = None
    booleanValue: Optional[bool] = None
    doubleArray: Optional[EnterpriseCrmEventbusProtoDoubleParameterArray] = None
    doubleValue: Optional[float] = None
    intArray: Optional[EnterpriseCrmEventbusProtoIntParameterArray] = None
    intValue: Optional[str] = None
    protoArray: Optional[EnterpriseCrmEventbusProtoProtoParameterArray] = None
    protoValue: Optional[Dict[str, Any]] = None
    serializedObjectValue: Optional[
        EnterpriseCrmEventbusProtoSerializedObjectParameter
    ] = None
    stringArray: Optional[EnterpriseCrmEventbusProtoStringParameterArray] = None
    stringValue: Optional[str] = None


class EnterpriseCrmEventbusProtoPropertyEntry(BaseModel):
    key: Optional[str] = Field(
        None,
        description='Key is used to retrieve the corresponding property value. This should be unique for a given fired event. The Tasks should be aware of the keys used while firing the events for them to be able to retrieve the values.',
    )
    value: Optional[EnterpriseCrmEventbusProtoValueType] = Field(
        None,
        description='Values for the defined keys. Each value can either be string, int, double or any proto message.',
    )


class EnterpriseCrmEventbusProtoSuspensionAuthPermissions(BaseModel):
    gaiaIdentity: Optional[
        EnterpriseCrmEventbusProtoSuspensionAuthPermissionsGaiaIdentity
    ] = Field(
        None, description='Represents a Gaia identity for a person or service account.'
    )
    googleGroup: Optional[
        EnterpriseCrmEventbusProtoSuspensionAuthPermissionsGaiaIdentity
    ] = None
    loasRole: Optional[str] = None
    mdbGroup: Optional[str] = None


class EnterpriseCrmEventbusProtoTaskExecutionDetails(BaseModel):
    taskAttemptStats: Optional[
        List[EnterpriseCrmEventbusProtoTaskExecutionDetailsTaskAttemptStats]
    ] = None
    taskExecutionState: Optional[TaskExecutionState] = None
    taskNumber: Optional[str] = Field(
        None, description='Pointer to the task config it used for execution.'
    )


class EnterpriseCrmEventbusProtoTaskMetadata(BaseModel):
    activeTaskName: Optional[str] = Field(
        None,
        description='The new task name to replace the current task if it is deprecated. Otherwise, it is the same as the current task name.',
    )
    admins: Optional[List[EnterpriseCrmEventbusProtoTaskMetadataAdmin]] = None
    category: Optional[Category] = None
    codeSearchLink: Optional[str] = Field(
        None, description='The Code Search link to the Task Java file.'
    )
    defaultJsonValidationOption: Optional[DefaultJsonValidationOption] = Field(
        None,
        description="Controls whether JSON workflow parameters are validated against provided schemas before and/or after this task's execution.",
    )
    defaultSpec: Optional[str] = Field(
        None,
        description='Contains the initial configuration of the task with default values set. For now, The string should be compatible to an ASCII-proto format.',
    )
    description: Optional[str] = Field(
        None,
        description='In a few sentences, describe the purpose and usage of the task.',
    )
    descriptiveName: Optional[str] = Field(
        None,
        description='The string name to show on the task list on the Workflow editor screen. This should be a very short, one to two words name for the task. (e.g. "Send Mail")',
    )
    docMarkdown: Optional[str] = Field(
        None,
        description='Snippet of markdown documentation to embed in the RHP for this task.',
    )
    externalCategory: Optional[ExternalCategory] = None
    externalCategorySequence: Optional[int] = Field(
        None,
        description='Sequence with which the task in specific category to be displayed in task discovery panel for external users.',
    )
    externalDocHtml: Optional[str] = Field(
        None,
        description='External-facing documention embedded in the RHP for this task.',
    )
    externalDocLink: Optional[str] = Field(
        None,
        description='Doc link for external-facing documentation (separate from g3doc).',
    )
    externalDocMarkdown: Optional[str] = Field(
        None, description='DEPRECATED: Use external_doc_html.'
    )
    g3DocLink: Optional[str] = Field(
        None, description='URL to the associated G3 Doc for the task if available'
    )
    iconLink: Optional[str] = Field(
        None,
        description='URL to gstatic image icon for this task. This icon shows up on the task list panel along with the task name in the Workflow Editor screen. Use the 24p, 2x, gray color icon image format.',
    )
    isDeprecated: Optional[bool] = Field(
        None,
        description='The deprecation status of the current task. Default value is false;',
    )
    name: Optional[str] = Field(
        None,
        description='The actual class name or the annotated name of the task. Task Author should initialize this field with value from the getName() method of the Task class.',
    )
    standaloneExternalDocHtml: Optional[str] = Field(
        None,
        description='External-facing documention for standalone IP in pantheon embedded in the RHP for this task. Non null only if different from external_doc_html',
    )
    status: Optional[Status1] = Field(
        None,
        description='Allows author to indicate if the task is ready to use or not. If not set, then it will default to INACTIVE.',
    )
    system: Optional[System] = None
    tags: Optional[List[str]] = Field(
        None,
        description='A set of tags that pertain to a particular task. This can be used to improve the searchability of tasks with several names ("REST Caller" vs. "Call REST Endpoint") or to help users find tasks based on related words.',
    )


class EnterpriseCrmEventbusProtoTaskUiConfig(BaseModel):
    taskUiModuleConfigs: Optional[
        List[EnterpriseCrmEventbusProtoTaskUiModuleConfig]
    ] = Field(None, description='Configurations of included config modules.')


class EnterpriseCrmEventbusStats(BaseModel):
    dimensions: Optional[EnterpriseCrmEventbusStatsDimensions] = Field(
        None, description='Dimensions that these stats have been aggregated on.'
    )
    durationInSeconds: Optional[float] = Field(
        None, description='Average duration in seconds.'
    )
    errorRate: Optional[float] = Field(None, description='Average error rate.')
    qps: Optional[float] = Field(None, description='Queries per second.')
    warningRate: Optional[float] = Field(None, description='Average warning rate.')


class EnterpriseCrmFrontendsEventbusProtoParameterValueType(BaseModel):
    booleanArray: Optional[EnterpriseCrmFrontendsEventbusProtoBooleanParameterArray] = (
        None
    )
    booleanValue: Optional[bool] = None
    doubleArray: Optional[EnterpriseCrmFrontendsEventbusProtoDoubleParameterArray] = (
        None
    )
    doubleValue: Optional[float] = None
    intArray: Optional[EnterpriseCrmFrontendsEventbusProtoIntParameterArray] = None
    intValue: Optional[str] = None
    jsonValue: Optional[str] = None
    protoArray: Optional[EnterpriseCrmFrontendsEventbusProtoProtoParameterArray] = None
    protoValue: Optional[Dict[str, Any]] = None
    serializedObjectValue: Optional[
        EnterpriseCrmFrontendsEventbusProtoSerializedObjectParameter
    ] = None
    stringArray: Optional[EnterpriseCrmFrontendsEventbusProtoStringParameterArray] = (
        None
    )
    stringValue: Optional[str] = None


class GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow(BaseModel):
    authCode: Optional[str] = Field(
        None,
        description='Authorization code to be exchanged for access and refresh tokens.',
    )
    clientId: Optional[str] = Field(
        None, description='Client ID for user-provided OAuth app.'
    )
    clientSecret: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None, description='Client secret for user-provided OAuth app.'
    )
    enablePkce: Optional[bool] = Field(
        None,
        description='Whether to enable PKCE when the user performs the auth code flow.',
    )
    pkceVerifier: Optional[str] = Field(
        None, description='PKCE verifier to be used during the auth code exchange.'
    )
    redirectUri: Optional[str] = Field(
        None, description='Redirect URI to be provided during the auth code exchange.'
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='Scopes the connection will request when the user performs the auth code flow.',
    )


class GoogleCloudConnectorsV1AuthConfigOauth2ClientCredentials(BaseModel):
    clientId: Optional[str] = Field(None, description='The client identifier.')
    clientSecret: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None, description='Secret version reference containing the client secret.'
    )


class GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer(BaseModel):
    clientKey: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None,
        description='Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.',
    )
    jwtClaims: Optional[GoogleCloudConnectorsV1AuthConfigOauth2JwtBearerJwtClaims] = (
        Field(None, description='JwtClaims providers fields to generate the token.')
    )


class GoogleCloudConnectorsV1AuthConfigSshPublicKey(BaseModel):
    certType: Optional[str] = Field(None, description='Format of SSH Client cert.')
    sshClientCert: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None,
        description='SSH Client Cert. It should contain both public and private key.',
    )
    sshClientCertPass: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None,
        description='Password (passphrase) for ssh client certificate if it has one.',
    )
    username: Optional[str] = Field(
        None, description='The user account used to authenticate.'
    )


class GoogleCloudConnectorsV1AuthConfigUserPassword(BaseModel):
    password: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None, description='Secret version reference containing the password.'
    )
    username: Optional[str] = Field(None, description='Username.')


class GoogleCloudConnectorsV1ConfigVariable(BaseModel):
    boolValue: Optional[bool] = Field(None, description='Value is a bool.')
    intValue: Optional[str] = Field(None, description='Value is an integer')
    key: Optional[str] = Field(None, description='Key of the config variable.')
    secretValue: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None, description='Value is a secret.'
    )
    stringValue: Optional[str] = Field(None, description='Value is a string.')


class GoogleCloudConnectorsV1SslConfig(BaseModel):
    additionalVariables: Optional[List[GoogleCloudConnectorsV1ConfigVariable]] = Field(
        None, description='Additional SSL related field values'
    )
    clientCertType: Optional[ClientCertType] = Field(
        None, description='Type of Client Cert (PEM/JKS/.. etc.)'
    )
    clientCertificate: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None, description='Client Certificate'
    )
    clientPrivateKey: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None, description='Client Private Key'
    )
    clientPrivateKeyPass: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None,
        description='Secret containing the passphrase protecting the Client Private Key',
    )
    privateServerCertificate: Optional[GoogleCloudConnectorsV1Secret] = Field(
        None,
        description='Private Server Certificate. Needs to be specified if trust model is `PRIVATE`.',
    )
    serverCertType: Optional[ServerCertType] = Field(
        None, description='Type of Server Cert (PEM/JKS/.. etc.)'
    )
    trustModel: Optional[TrustModel] = Field(
        None, description='Trust Model of the SSL connection'
    )
    type: Optional[Type] = Field(
        None, description='Controls the ssl type for the given connector version.'
    )
    useSsl: Optional[bool] = Field(None, description='Bool for enabling SSL')


class GoogleCloudIntegrationsV1alphaCertificate(BaseModel):
    certificateStatus: Optional[CertificateStatus] = Field(
        None, description='Status of the certificate'
    )
    credentialId: Optional[str] = Field(
        None,
        description='Immutable. Credential id that will be used to register with trawler INTERNAL_ONLY',
    )
    description: Optional[str] = Field(
        None, description='Description of the certificate'
    )
    displayName: Optional[str] = Field(None, description='Name of the certificate')
    name: Optional[str] = Field(
        None, description='Output only. Auto generated primary key'
    )
    rawCertificate: Optional[GoogleCloudIntegrationsV1alphaClientCertificate] = Field(
        None,
        description='Input only. Raw client certificate which would be registered with trawler',
    )
    requestorId: Optional[str] = Field(
        None,
        description='Immutable. Requestor ID to be used to register certificate with trawler',
    )
    validEndTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp after which certificate will expire',
    )
    validStartTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp after which certificate will be valid',
    )


class GoogleCloudIntegrationsV1alphaClientConfig(BaseModel):
    billingType: Optional[BillingType] = Field(
        None, description='Indicates the billing type of the client'
    )
    clientState: Optional[ClientState] = Field(
        None, description='Indicates the activity state the client'
    )
    cloudKmsConfig: Optional[GoogleCloudIntegrationsV1alphaCloudKmsConfig] = Field(
        None,
        description='Cloud KMS config for Auth Module to encrypt/decrypt credentials.',
    )
    cloudLoggingConfig: Optional[GoogleCloudIntegrationsV1alphaCloudLoggingConfig] = (
        Field(
            None,
            description='Determines the cloud logging configuration for the project',
        )
    )
    createTime: Optional[str] = Field(
        None, description='The timestamp when the client was first created.'
    )
    description: Optional[str] = Field(
        None, description='Description of what the client is used for'
    )
    id: Optional[str] = Field(
        None, description='Globally unique ID (project_id + region)'
    )
    p4ServiceAccount: Optional[str] = Field(
        None, description='The P4SA account associated with this client'
    )
    projectId: Optional[str] = Field(
        None, description='The GCP project id of the client associated with'
    )
    region: Optional[str] = Field(
        None, description='The region the client is linked to.'
    )


class GoogleCloudIntegrationsV1alphaErrorCatcherConfig(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. User-provided description intended to give more business context about the error catcher config.',
    )
    errorCatcherId: Optional[str] = Field(
        None,
        description='Required. An error catcher id is string representation for the error catcher config. Within a workflow, error_catcher_id uniquely identifies an error catcher config among all error catcher configs for the workflow',
    )
    errorCatcherNumber: Optional[str] = Field(
        None,
        description='Required. A number to uniquely identify each error catcher config within the workflow on UI.',
    )
    label: Optional[str] = Field(
        None,
        description='Optional. The user created label for a particular error catcher. Optional.',
    )
    position: Optional[GoogleCloudIntegrationsV1alphaCoordinate] = Field(
        None,
        description='Optional. Informs the front-end application where to draw this error catcher config on the UI.',
    )
    startErrorTasks: Optional[List[GoogleCloudIntegrationsV1alphaNextTask]] = Field(
        None,
        description='Required. The set of start tasks that are to be executed for the error catch flow',
    )


class GoogleCloudIntegrationsV1alphaEventParameter(BaseModel):
    key: Optional[str] = Field(
        None,
        description='Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.',
    )
    value: Optional[GoogleCloudIntegrationsV1alphaValueType] = Field(
        None,
        description='Values for the defined keys. Each value can either be string, int, double or any proto message.',
    )


class GoogleCloudIntegrationsV1alphaExecutionSnapshot(BaseModel):
    checkpointTaskNumber: Optional[str] = Field(
        None,
        description='Indicates "after which checkpoint task\'s execution" this snapshot is taken.',
    )
    executionSnapshotMetadata: Optional[
        GoogleCloudIntegrationsV1alphaExecutionSnapshotExecutionSnapshotMetadata
    ] = Field(None, description='Metadata of the execution snapshot.')
    params: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = Field(
        None, description='Parameters used during the execution.'
    )
    taskExecutionDetails: Optional[
        List[GoogleCloudIntegrationsV1alphaTaskExecutionDetails]
    ] = Field(
        None,
        description='All of the task execution details at the given point of time.',
    )


class GoogleCloudIntegrationsV1alphaGetClientMetadataResponse(BaseModel):
    properties: Optional[GoogleCloudIntegrationsV1alphaProjectProperties] = Field(
        None,
        description='Required. Required: The client configuration that was requested',
    )


class GoogleCloudIntegrationsV1alphaGetClientResponse(BaseModel):
    client: Optional[GoogleCloudIntegrationsV1alphaClientConfig] = Field(
        None,
        description='Required. Required: The client configuration that was requested',
    )


class GoogleCloudIntegrationsV1alphaIntegrationAlertConfig(BaseModel):
    aggregationPeriod: Optional[str] = Field(
        None,
        description='The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week). For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.',
    )
    alertThreshold: Optional[int] = Field(
        None,
        description='For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.',
    )
    disableAlert: Optional[bool] = Field(
        None,
        description='Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this integration alert.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Name of the alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the integration.',
    )
    durationThreshold: Optional[str] = Field(
        None,
        description='Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.',
    )
    metricType: Optional[MetricType1] = Field(None, description='The type of metric.')
    onlyFinalAttempt: Optional[bool] = Field(
        None,
        description='For either events or tasks, depending on the type of alert, count only final attempts, not retries.',
    )
    thresholdType: Optional[ThresholdType2] = Field(
        None,
        description='The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.',
    )
    thresholdValue: Optional[
        GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValue
    ] = Field(
        None,
        description='The metric value, above or below which the alert should be triggered.',
    )


class GoogleCloudIntegrationsV1alphaIntegrationParameter(BaseModel):
    dataType: Optional[DataType4] = Field(None, description='Type of the parameter.')
    defaultValue: Optional[GoogleCloudIntegrationsV1alphaValueType] = Field(
        None,
        description='Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.',
    )
    displayName: Optional[str] = Field(
        None,
        description='The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".',
    )
    inputOutputType: Optional[InputOutputType] = Field(
        None, description='Specifies the input/output type for the parameter.'
    )
    isTransient: Optional[bool] = Field(
        None, description='Whether this parameter is a transient parameter.'
    )
    jsonSchema: Optional[str] = Field(
        None,
        description='This schema will be used to validate runtime JSON-typed values of this parameter.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.',
    )
    producer: Optional[str] = Field(
        None,
        description='The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.',
    )
    searchable: Optional[bool] = Field(
        None, description='Searchable in the execution log or not.'
    )


class GoogleCloudIntegrationsV1alphaListCertificatesResponse(BaseModel):
    certificates: Optional[List[GoogleCloudIntegrationsV1alphaCertificate]] = Field(
        None, description='The list of Certificates retrieved.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='The token used to retrieve the next page of results.'
    )


class GoogleCloudIntegrationsV1alphaListRuntimeActionSchemasResponse(BaseModel):
    nextPageToken: Optional[str] = Field(None, description='Next page token.')
    runtimeActionSchemas: Optional[
        List[GoogleCloudIntegrationsV1alphaRuntimeActionSchema]
    ] = Field(None, description='Runtime action schemas.')


class GoogleCloudIntegrationsV1alphaListRuntimeEntitySchemasResponse(BaseModel):
    nextPageToken: Optional[str] = Field(None, description='Next page token.')
    runtimeEntitySchemas: Optional[
        List[GoogleCloudIntegrationsV1alphaRuntimeEntitySchema]
    ] = Field(None, description='Runtime entity schemas.')


class GoogleCloudIntegrationsV1alphaListSfdcChannelsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The token used to retrieve the next page of results.'
    )
    sfdcChannels: Optional[List[GoogleCloudIntegrationsV1alphaSfdcChannel]] = Field(
        None, description='The list of SfdcChannels retrieved.'
    )


class GoogleCloudIntegrationsV1alphaListSfdcInstancesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The token used to retrieve the next page of results.'
    )
    sfdcInstances: Optional[List[GoogleCloudIntegrationsV1alphaSfdcInstance]] = Field(
        None, description='The list of SfdcInstances retrieved.'
    )


class GoogleCloudIntegrationsV1alphaParameterMapField(BaseModel):
    literalValue: Optional[GoogleCloudIntegrationsV1alphaValueType] = Field(
        None, description='Passing a literal value.'
    )
    referenceKey: Optional[str] = Field(
        None, description='Referencing one of the Integration variables.'
    )


class GoogleCloudIntegrationsV1alphaSuspensionApprovalConfig(BaseModel):
    customMessage: Optional[str] = Field(
        None, description='Information to provide for recipients.'
    )
    emailAddresses: Optional[List[str]] = Field(
        None, description='Email addresses to send approval request to.'
    )
    expiration: Optional[GoogleCloudIntegrationsV1alphaSuspensionApprovalExpiration] = (
        Field(
            None,
            description='Indicates the next steps when no external actions happen on the suspension.',
        )
    )


class GoogleCloudIntegrationsV1alphaTaskConfig(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. User-provided description intended to give additional business context about the task.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Optional. User-provided label that is attached to this TaskConfig in the UI.',
    )
    errorCatcherId: Optional[str] = Field(
        None,
        description='Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task',
    )
    externalTaskType: Optional[ExternalTaskType] = Field(
        None, description='Optional. External task type of the task'
    )
    failurePolicy: Optional[GoogleCloudIntegrationsV1alphaFailurePolicy] = Field(
        None,
        description='Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for asynchronous calls to Eventbus alone (Post To Queue, Schedule etc.).',
    )
    jsonValidationOption: Optional[JsonValidationOption1] = Field(
        None,
        description='Optional. If set, overrides the option configured in the Task implementation class.',
    )
    nextTasks: Optional[List[GoogleCloudIntegrationsV1alphaNextTask]] = Field(
        None,
        description='Optional. The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.',
    )
    nextTasksExecutionPolicy: Optional[NextTasksExecutionPolicy2] = Field(
        None,
        description='Optional. The policy dictating the execution of the next set of tasks for the current task.',
    )
    parameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaEventParameter]] = (
        Field(
            None,
            description='Optional. The customized parameters the user can pass to this task.',
        )
    )
    position: Optional[GoogleCloudIntegrationsV1alphaCoordinate] = Field(
        None,
        description='Optional. Informs the front-end application where to draw this error catcher config on the UI.',
    )
    successPolicy: Optional[GoogleCloudIntegrationsV1alphaSuccessPolicy] = Field(
        None,
        description='Optional. Determines what action to take upon successful task completion.',
    )
    synchronousCallFailurePolicy: Optional[
        GoogleCloudIntegrationsV1alphaFailurePolicy
    ] = Field(
        None,
        description='Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for synchronous calls to Eventbus alone (Post).',
    )
    task: Optional[str] = Field(None, description='Optional. The name for the task.')
    taskExecutionStrategy: Optional[TaskExecutionStrategy1] = Field(
        None,
        description='Optional. The policy dictating the execution strategy of this task.',
    )
    taskId: Optional[str] = Field(
        None,
        description='Required. The identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_id`).',
    )
    taskTemplate: Optional[str] = Field(
        None,
        description='Optional. Used to define task-template name if task is of type task-template',
    )


class GoogleCloudIntegrationsV1alphaTriggerConfig(BaseModel):
    alertConfig: Optional[
        List[GoogleCloudIntegrationsV1alphaIntegrationAlertConfig]
    ] = Field(
        None,
        description='Optional. An alert threshold configuration for the [trigger + client + integration] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + integration] when published.',
    )
    cloudSchedulerConfig: Optional[
        GoogleCloudIntegrationsV1alphaCloudSchedulerConfig
    ] = Field(None, description='Optional. Cloud Scheduler Trigger related metadata')
    description: Optional[str] = Field(
        None,
        description='Optional. User-provided description intended to give additional business context about the task.',
    )
    errorCatcherId: Optional[str] = Field(
        None,
        description='Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task',
    )
    label: Optional[str] = Field(
        None, description='Optional. The user created label for a particular trigger.'
    )
    nextTasksExecutionPolicy: Optional[NextTasksExecutionPolicy2] = Field(
        None, description='Optional. Dictates how next tasks will be executed.'
    )
    position: Optional[GoogleCloudIntegrationsV1alphaCoordinate] = Field(
        None,
        description='Optional. Informs the front-end application where to draw this error catcher config on the UI.',
    )
    properties: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Configurable properties of the trigger, not to be confused with integration parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Pub/sub triggers.',
    )
    startTasks: Optional[List[GoogleCloudIntegrationsV1alphaNextTask]] = Field(
        None,
        description='Optional. Set of tasks numbers from where the integration execution is started by this trigger. If this is empty, then integration is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same integration execution graph).',
    )
    triggerId: Optional[str] = Field(
        None, description='Optional. The backend trigger ID.'
    )
    triggerNumber: Optional[str] = Field(
        None,
        description='Required. A number to uniquely identify each trigger config within the integration on UI.',
    )
    triggerType: Optional[TriggerType1] = Field(
        None, description='Optional. Type of trigger'
    )


class EnterpriseCrmEventbusProtoAttributes(BaseModel):
    dataType: Optional[DataType] = Field(
        None,
        description='Things like URL, Email, Currency, Timestamp (rather than string, int64...)',
    )
    defaultValue: Optional[EnterpriseCrmEventbusProtoValueType] = Field(
        None, description='Used to define defaults.'
    )
    isRequired: Optional[bool] = Field(
        None,
        description='Required for event execution. The validation will be done by the event bus when the event is triggered.',
    )
    isSearchable: Optional[bool] = Field(
        None,
        description='Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.',
    )
    logSettings: Optional[EnterpriseCrmEventbusProtoLogSettings] = Field(
        None, description='See'
    )
    searchable: Optional[Searchable] = None
    taskVisibility: Optional[List[str]] = Field(
        None,
        description='List of tasks that can view this property, if empty then all.',
    )


class EnterpriseCrmEventbusProtoCombinedCondition(BaseModel):
    conditions: Optional[List[EnterpriseCrmEventbusProtoCondition]] = Field(
        None, description='A set of individual constituent conditions.'
    )


class EnterpriseCrmEventbusProtoEventBusProperties(BaseModel):
    properties: Optional[List[EnterpriseCrmEventbusProtoPropertyEntry]] = Field(
        None, description='An unordered list of property entries.'
    )


class EnterpriseCrmEventbusProtoNextTask(BaseModel):
    combinedConditions: Optional[List[EnterpriseCrmEventbusProtoCombinedCondition]] = (
        Field(
            None,
            description='Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`',
        )
    )
    condition: Optional[str] = Field(
        None,
        description='Standard filter expression for this task to become an eligible next task.',
    )
    description: Optional[str] = Field(
        None,
        description='User-provided description intended to give more business context about the next task edge or condition.',
    )
    label: Optional[str] = Field(
        None, description='User-provided label that is attached to this edge in the UI.'
    )
    taskConfigId: Optional[str] = Field(None, description='ID of the next task.')
    taskNumber: Optional[str] = Field(None, description='Task number of the next task.')


class EnterpriseCrmEventbusProtoParameterEntry(BaseModel):
    key: Optional[str] = Field(
        None,
        description='Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.',
    )
    value: Optional[EnterpriseCrmEventbusProtoParameterValueType] = Field(
        None,
        description='Values for the defined keys. Each value can either be string, int, double or any proto message.',
    )


class EnterpriseCrmEventbusProtoParameterMapField(BaseModel):
    literalValue: Optional[EnterpriseCrmEventbusProtoParameterValueType] = Field(
        None, description='Passing a literal value.'
    )
    referenceKey: Optional[str] = Field(
        None, description='Referencing one of the WF variables.'
    )


class EnterpriseCrmEventbusProtoScatterResponse(BaseModel):
    errorMsg: Optional[str] = Field(
        None, description='The error message of the failure if applicable.'
    )
    executionIds: Optional[List[str]] = Field(
        None, description='The execution ids of each Subworkflow fired by this scatter.'
    )
    isSuccessful: Optional[bool] = Field(
        None,
        description='If execution is sync, this is true if the execution passed and false if it failed. If the execution is async, this is true if the WF was fired off successfully, and false if it failed to execute. The success or failure of the subworkflows executed are not captured.',
    )
    responseParams: Optional[List[EnterpriseCrmEventbusProtoParameterEntry]] = Field(
        None,
        description='A list of all the response parameters in the aggregtorMap stored with the remapped key.',
    )
    scatterElement: Optional[EnterpriseCrmEventbusProtoParameterValueType] = Field(
        None, description='The element that was scattered for this execution.'
    )


class EnterpriseCrmFrontendsEventbusProtoParamSpecEntry(BaseModel):
    className: Optional[str] = Field(
        None,
        description='The FQCN of the Java object this represents. A string, for example, would be "java.lang.String". If this is "java.lang.Object", the parameter can be of any type.',
    )
    collectionElementClassName: Optional[str] = Field(
        None,
        description='If it is a collection of objects, this would be the FCQN of every individual element in the collection. If this is "java.lang.Object", the parameter is a collection of any type.',
    )
    config: Optional[EnterpriseCrmEventbusProtoParamSpecEntryConfig] = Field(
        None, description='Optional fields, such as help text and other useful info.'
    )
    dataType: Optional[DataType1] = Field(
        None, description='The data type of the parameter.'
    )
    defaultValue: Optional[EnterpriseCrmFrontendsEventbusProtoParameterValueType] = (
        Field(
            None,
            description='Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.',
        )
    )
    isDeprecated: Optional[bool] = Field(
        None,
        description='If set, this entry is deprecated, so further use of this parameter should be prohibited.',
    )
    isOutput: Optional[bool] = None
    jsonSchema: Optional[str] = Field(
        None,
        description='If the data_type is JSON_VALUE, then this will define its schema.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is used to retrieve the corresponding parameter value. This should be unique for a given task. These parameters must be predefined in the workflow definition.',
    )
    protoDef: Optional[EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinition] = Field(
        None, description='Populated if this represents a proto or proto array.'
    )
    required: Optional[bool] = Field(
        None,
        description='If set, the user must provide an input value for this parameter.',
    )
    validationRule: Optional[EnterpriseCrmEventbusProtoParamSpecEntryValidationRule] = (
        Field(
            None,
            description='Rule used to validate inputs (individual values and collection elements) for this parameter.',
        )
    )


class EnterpriseCrmFrontendsEventbusProtoParamSpecsMessage(BaseModel):
    parameters: Optional[List[EnterpriseCrmFrontendsEventbusProtoParamSpecEntry]] = None


class EnterpriseCrmFrontendsEventbusProtoParameterEntry(BaseModel):
    dataType: Optional[DataType1] = Field(
        None, description='Explicitly getting the type of the parameter.'
    )
    key: Optional[str] = Field(
        None,
        description='Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.',
    )
    value: Optional[EnterpriseCrmFrontendsEventbusProtoParameterValueType] = Field(
        None,
        description='Values for the defined keys. Each value can either be string, int, double or any proto message.',
    )


class EnterpriseCrmFrontendsEventbusProtoParameterMapField(BaseModel):
    literalValue: Optional[EnterpriseCrmFrontendsEventbusProtoParameterValueType] = (
        Field(None, description='Passing a literal value.')
    )
    referenceKey: Optional[str] = Field(
        None, description='Referencing one of the WF variables.'
    )


class EnterpriseCrmFrontendsEventbusProtoTaskEntity(BaseModel):
    disabledForVpcSc: Optional[bool] = Field(
        None, description='True if the task has conflict with vpcsc'
    )
    metadata: Optional[EnterpriseCrmEventbusProtoTaskMetadata] = Field(
        None, description='Metadata inclueds the task name, author and so on.'
    )
    paramSpecs: Optional[EnterpriseCrmFrontendsEventbusProtoParamSpecsMessage] = Field(
        None,
        description='Declarations for inputs/outputs for a TypedTask. This is also associated with the METADATA mask.',
    )
    stats: Optional[EnterpriseCrmEventbusStats] = Field(
        None, description='Deprecated - statistics from the Monarch query.'
    )
    taskType: Optional[TaskType] = Field(
        None, description='Defines the type of the task'
    )
    uiConfig: Optional[EnterpriseCrmEventbusProtoTaskUiConfig] = Field(
        None,
        description='UI configuration for this task Also associated with the METADATA mask.',
    )


class EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry(BaseModel):
    attributes: Optional[EnterpriseCrmEventbusProtoAttributes] = Field(
        None, description='Metadata information about the parameters.'
    )
    children: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry]
    ] = Field(
        None,
        description='Child parameters nested within this parameter. This field only applies to protobuf parameters',
    )
    dataType: Optional[DataType1] = Field(
        None, description='The data type of the parameter.'
    )
    defaultValue: Optional[EnterpriseCrmFrontendsEventbusProtoParameterValueType] = (
        Field(
            None,
            description='Default values for the defined keys. Each value can either be string, int, double or any proto message or a serialized object.',
        )
    )
    inOutType: Optional[InOutType] = Field(
        None, description='Specifies the input/output type for the parameter.'
    )
    isTransient: Optional[bool] = Field(
        None, description='Whether this parameter is a transient parameter.'
    )
    jsonSchema: Optional[str] = Field(
        None,
        description='This schema will be used to validate runtime JSON-typed values of this parameter.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.',
    )
    name: Optional[str] = Field(
        None,
        description='The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".',
    )
    producedBy: Optional[EnterpriseCrmEventbusProtoNodeIdentifier] = Field(
        None,
        description='The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.',
    )
    producer: Optional[str] = None
    protoDefName: Optional[str] = Field(
        None,
        description='The name of the protobuf type if the parameter has a protobuf data type.',
    )
    protoDefPath: Optional[str] = Field(
        None,
        description='If the data type is of type proto or proto array, this field needs to be populated with the fully qualified proto name. This message, for example, would be "enterprise.crm.frontends.eventbus.proto.WorkflowParameterEntry".',
    )


class EnterpriseCrmFrontendsEventbusProtoWorkflowParameters(BaseModel):
    parameters: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry]
    ] = Field(
        None,
        description='Parameters are a part of Event and can be used to communiticate between different tasks that are part of the same workflow execution.',
    )


class GoogleCloudConnectorsV1AuthConfig(BaseModel):
    additionalVariables: Optional[List[GoogleCloudConnectorsV1ConfigVariable]] = Field(
        None, description='List containing additional auth configs.'
    )
    authType: Optional[AuthType] = Field(
        None, description='The type of authentication configured.'
    )
    oauth2AuthCodeFlow: Optional[
        GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow
    ] = Field(None, description='Oauth2AuthCodeFlow.')
    oauth2ClientCredentials: Optional[
        GoogleCloudConnectorsV1AuthConfigOauth2ClientCredentials
    ] = Field(None, description='Oauth2ClientCredentials.')
    oauth2JwtBearer: Optional[GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer] = Field(
        None, description='Oauth2JwtBearer.'
    )
    sshPublicKey: Optional[GoogleCloudConnectorsV1AuthConfigSshPublicKey] = Field(
        None, description='SSH Public Key.'
    )
    userPassword: Optional[GoogleCloudConnectorsV1AuthConfigUserPassword] = Field(
        None, description='UserPassword.'
    )


class GoogleCloudConnectorsV1Connection(BaseModel):
    authConfig: Optional[GoogleCloudConnectorsV1AuthConfig] = Field(
        None,
        description="Optional. Configuration for establishing the connection's authentication with an external system.",
    )
    configVariables: Optional[List[GoogleCloudConnectorsV1ConfigVariable]] = Field(
        None,
        description='Optional. Configuration for configuring the connection with an external system.',
    )
    connectorVersion: Optional[str] = Field(
        None,
        description='Required. Connector version on which the connection is created. The format is: projects/*/locations/*/providers/*/connectors/*/versions/* Only global location is supported for ConnectorVersion resource.',
    )
    createTime: Optional[str] = Field(None, description='Output only. Created time.')
    description: Optional[str] = Field(
        None, description='Optional. Description of the resource.'
    )
    destinationConfigs: Optional[List[GoogleCloudConnectorsV1DestinationConfig]] = (
        Field(
            None,
            description="Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s).",
        )
    )
    envoyImageLocation: Optional[str] = Field(
        None,
        description='Output only. GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}',
    )
    imageLocation: Optional[str] = Field(
        None,
        description='Output only. GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources',
    )
    lockConfig: Optional[GoogleCloudConnectorsV1LockConfig] = Field(
        None,
        description='Optional. Configuration that indicates whether or not the Connection can be edited.',
    )
    logConfig: Optional[GoogleCloudConnectorsV1LogConfig] = Field(
        None, description='Optional. Log configuration for the connection.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}',
    )
    nodeConfig: Optional[GoogleCloudConnectorsV1NodeConfig] = Field(
        None, description='Optional. Node configuration for the connection.'
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='Optional. Service account needed for runtime plane to access GCP resources.',
    )
    serviceDirectory: Optional[str] = Field(
        None,
        description='Output only. The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"',
    )
    sslConfig: Optional[GoogleCloudConnectorsV1SslConfig] = Field(
        None, description='Optional. Ssl config of a connection'
    )
    status: Optional[GoogleCloudConnectorsV1ConnectionStatus] = Field(
        None, description='Output only. Current status of the connection.'
    )
    suspended: Optional[bool] = Field(
        None,
        description='Optional. Suspended indicates if a user has suspended a connection or not.',
    )
    updateTime: Optional[str] = Field(None, description='Output only. Updated time.')


class GoogleCloudIntegrationsV1alphaExecutionDetails(BaseModel):
    attemptStats: Optional[List[GoogleCloudIntegrationsV1alphaAttemptStats]] = Field(
        None, description='List of Start and end time of the execution attempts.'
    )
    executionSnapshots: Optional[
        List[GoogleCloudIntegrationsV1alphaExecutionSnapshot]
    ] = Field(None, description='List of snapshots taken during the execution.')
    state: Optional[State2] = Field(None, description='Status of the execution.')


class GoogleCloudIntegrationsV1alphaListConnectionsResponse(BaseModel):
    connections: Optional[List[GoogleCloudConnectorsV1Connection]] = Field(
        None, description='Connections.'
    )
    nextPageToken: Optional[str] = Field(None, description='Next page token.')


class GoogleCloudIntegrationsV1alphaParameterMapEntry(BaseModel):
    key: Optional[GoogleCloudIntegrationsV1alphaParameterMapField] = Field(
        None, description='Key of the map entry.'
    )
    value: Optional[GoogleCloudIntegrationsV1alphaParameterMapField] = Field(
        None, description='Value of the map entry.'
    )


class EnterpriseCrmEventbusProtoEventParameters(BaseModel):
    parameters: Optional[List[EnterpriseCrmEventbusProtoParameterEntry]] = Field(
        None,
        description='Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.',
    )


class EnterpriseCrmEventbusProtoParameterMapEntry(BaseModel):
    key: Optional[EnterpriseCrmEventbusProtoParameterMapField] = None
    value: Optional[EnterpriseCrmEventbusProtoParameterMapField] = None


class EnterpriseCrmEventbusProtoTeardownTaskConfig(BaseModel):
    creatorEmail: Optional[str] = Field(
        None, description="The creator's email address."
    )
    name: Optional[str] = Field(
        None,
        description='Required. Unique identifier of the teardown task within this Config. We use this field as the identifier to find next teardown tasks.',
    )
    nextTeardownTask: Optional[EnterpriseCrmEventbusProtoNextTeardownTask] = None
    parameters: Optional[EnterpriseCrmEventbusProtoEventParameters] = Field(
        None, description='The parameters the user can pass to this task.'
    )
    properties: Optional[EnterpriseCrmEventbusProtoEventBusProperties] = None
    teardownTaskImplementationClassName: Optional[str] = Field(
        None, description='Required. Implementation class name.'
    )


class EnterpriseCrmEventbusProtoTriggerCriteria(BaseModel):
    condition: Optional[str] = Field(
        None,
        description="Required. Standard filter expression, when true the workflow will be executed. If there's no trigger_criteria_task_implementation_class_name specified, the condition will be validated directly.",
    )
    parameters: Optional[EnterpriseCrmEventbusProtoEventParameters] = Field(
        None,
        description='Optional. To be used in TaskConfig for the implementation class.',
    )
    triggerCriteriaTaskImplementationClassName: Optional[str] = Field(
        None,
        description='Optional. Implementation class name. The class should implement the “TypedTask” interface.',
    )


class EnterpriseCrmFrontendsEventbusProtoEventParameters(BaseModel):
    parameters: Optional[List[EnterpriseCrmFrontendsEventbusProtoParameterEntry]] = (
        Field(
            None,
            description='Parameters are a part of Event and can be used to communicate between different tasks that are part of the same workflow execution.',
        )
    )


class EnterpriseCrmFrontendsEventbusProtoParameterMapEntry(BaseModel):
    key: Optional[EnterpriseCrmFrontendsEventbusProtoParameterMapField] = None
    value: Optional[EnterpriseCrmFrontendsEventbusProtoParameterMapField] = None


class EnterpriseCrmFrontendsEventbusProtoRollbackStrategy(BaseModel):
    parameters: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = Field(
        None,
        description='Optional. The customized parameters the user can pass to this task.',
    )
    rollbackTaskImplementationClassName: Optional[str] = Field(
        None,
        description='Required. This is the name of the task that needs to be executed upon rollback of this task.',
    )
    taskNumbersToRollback: Optional[List[str]] = Field(
        None,
        description='Required. These are the tasks numbers of the tasks whose `rollback_strategy.rollback_task_implementation_class_name` needs to be executed upon failure of this task.',
    )


class EnterpriseCrmFrontendsEventbusProtoTaskConfig(BaseModel):
    alertConfigs: Optional[List[EnterpriseCrmEventbusProtoTaskAlertConfig]] = Field(
        None,
        description='Alert configurations on error rate, warning rate, number of runs, durations, etc.',
    )
    createTime: Optional[str] = Field(None, description='Auto-generated.')
    creatorEmail: Optional[str] = Field(
        None,
        description="The creator's email address. Auto-generated from the user's email.",
    )
    description: Optional[str] = Field(
        None,
        description='User-provided description intended to give more business context about the task.',
    )
    disableStrictTypeValidation: Optional[bool] = Field(
        None,
        description='If this config contains a TypedTask, allow validation to succeed if an input is read from the output of another TypedTask whose output type is declared as a superclass of the requested input type. For instance, if the previous task declares an output of type Message, any task with this flag enabled will pass validation when attempting to read any proto Message type from the resultant Event parameter.',
    )
    errorCatcherId: Optional[str] = Field(
        None,
        description='Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task',
    )
    externalTaskType: Optional[ExternalTaskType] = None
    failurePolicy: Optional[EnterpriseCrmEventbusProtoFailurePolicy] = Field(
        None,
        description='Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for asynchronous calls to Eventbus alone (Post To Queue, Schedule etc.).',
    )
    incomingEdgeCount: Optional[int] = Field(
        None, description='The number of edges leading into this TaskConfig.'
    )
    jsonValidationOption: Optional[JsonValidationOption] = Field(
        None,
        description='If set, overrides the option configured in the Task implementation class.',
    )
    label: Optional[str] = Field(
        None,
        description='User-provided label that is attached to this TaskConfig in the UI.',
    )
    lastModifiedTime: Optional[str] = Field(None, description='Auto-generated.')
    nextTasks: Optional[List[EnterpriseCrmEventbusProtoNextTask]] = Field(
        None,
        description='The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.',
    )
    nextTasksExecutionPolicy: Optional[NextTasksExecutionPolicy] = Field(
        None,
        description='The policy dictating the execution of the next set of tasks for the current task.',
    )
    parameters: Optional[
        Dict[str, EnterpriseCrmFrontendsEventbusProtoParameterEntry]
    ] = Field(
        None, description='The customized parameters the user can pass to this task.'
    )
    position: Optional[EnterpriseCrmEventbusProtoCoordinate] = Field(
        None,
        description='Optional. Informs the front-end application where to draw this task config on the UI.',
    )
    precondition: Optional[str] = Field(
        None,
        description='Optional. Standard filter expression evaluated before execution. Independent of other conditions and tasks. Can be used to enable rollout. e.g. "rollout(5)" will only allow 5% of incoming traffic to task.',
    )
    preconditionLabel: Optional[str] = Field(
        None,
        description='Optional. User-provided label that is attached to precondition in the UI.',
    )
    rollbackStrategy: Optional[EnterpriseCrmFrontendsEventbusProtoRollbackStrategy] = (
        Field(
            None,
            description='Optional. Contains information about what needs to be done upon failure (either a permanent error or after it has been retried too many times).',
        )
    )
    successPolicy: Optional[EnterpriseCrmEventbusProtoSuccessPolicy] = Field(
        None,
        description='Determines what action to take upon successful task completion.',
    )
    synchronousCallFailurePolicy: Optional[EnterpriseCrmEventbusProtoFailurePolicy] = (
        Field(
            None,
            description='Optional. Determines the number of times the task will be retried on failure and with what retry strategy. This is applicable for synchronous calls to Eventbus alone (Post).',
        )
    )
    taskEntity: Optional[EnterpriseCrmFrontendsEventbusProtoTaskEntity] = Field(
        None,
        description='Copy of the task entity that this task config is an instance of.',
    )
    taskExecutionStrategy: Optional[TaskExecutionStrategy] = Field(
        None, description='The policy dictating the execution strategy of this task.'
    )
    taskName: Optional[str] = Field(None, description='The name for the task.')
    taskNumber: Optional[str] = Field(
        None,
        description='REQUIRED: the identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_number`).',
    )
    taskSpec: Optional[str] = Field(
        None,
        description='A string template that allows user to configure task parameters (with either literal default values or tokens which will be resolved at execution time) for the task. It will eventually replace the old "parameters" field.',
    )
    taskTemplateName: Optional[str] = Field(
        None,
        description='Used to define task-template name if task is of type task-template',
    )
    taskType: Optional[TaskType] = Field(
        None, description='Defines the type of the task'
    )


class EnterpriseCrmFrontendsEventbusProtoTriggerConfig(BaseModel):
    alertConfig: Optional[List[EnterpriseCrmEventbusProtoWorkflowAlertConfig]] = Field(
        None,
        description='An alert threshold configuration for the [trigger + client + workflow] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + workflow] when published.',
    )
    cloudSchedulerConfig: Optional[EnterpriseCrmEventbusProtoCloudSchedulerConfig] = (
        None
    )
    description: Optional[str] = Field(
        None,
        description='User-provided description intended to give more business context about the task.',
    )
    enabledClients: Optional[List[str]] = Field(
        None,
        description='Required. The list of client ids which are enabled to execute the workflow using this trigger. In other words, these clients have the workflow execution privledges for this trigger. For API trigger, the client id in the incoming request is validated against the list of enabled clients. For non-API triggers, one workflow execution is triggered on behalf of each enabled client.',
    )
    errorCatcherId: Optional[str] = Field(
        None,
        description='Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task',
    )
    label: Optional[str] = Field(
        None, description='The user created label for a particular trigger.'
    )
    nextTasksExecutionPolicy: Optional[NextTasksExecutionPolicy] = Field(
        None, description='Dictates how next tasks will be executed.'
    )
    pauseWorkflowExecutions: Optional[bool] = Field(
        None,
        description='Optional. If set to true, any upcoming requests for this trigger config will be paused and the executions will be resumed later when the flag is reset. The workflow to which this trigger config belongs has to be in ACTIVE status for the executions to be paused or resumed.',
    )
    position: Optional[EnterpriseCrmEventbusProtoCoordinate] = Field(
        None,
        description='Optional. Informs the front-end application where to draw this trigger config on the UI.',
    )
    properties: Optional[Dict[str, str]] = Field(
        None,
        description='Configurable properties of the trigger, not to be confused with workflow parameters. E.g. "name" is a property for API triggers and "subscription" is a property for Cloud Pubsub triggers.',
    )
    startTasks: Optional[List[EnterpriseCrmEventbusProtoNextTask]] = Field(
        None,
        description='Set of tasks numbers from where the workflow execution is started by this trigger. If this is empty, then workflow is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same workflow execution graph).',
    )
    triggerCriteria: Optional[EnterpriseCrmEventbusProtoTriggerCriteria] = Field(
        None,
        description='Optional. When set, Eventbus will run the task specified in the trigger_criteria and validate the result using the trigger_criteria.condition, and only execute the workflow when result is true.',
    )
    triggerId: Optional[str] = Field(None, description='The backend trigger ID.')
    triggerNumber: Optional[str] = Field(
        None,
        description='Required. A number to uniquely identify each trigger config within the workflow on UI.',
    )
    triggerType: Optional[TriggerType] = None


class GoogleCloudIntegrationsV1alphaExecuteIntegrationsRequest(BaseModel):
    doNotPropagateError: Optional[bool] = Field(
        None,
        description='Optional. Flag to determine how to should propagate errors. If this flag is set to be true, it will not throw an exception. Instead, it will return a {@link ExecuteIntegrationsResponse} with an execution id and error messages as PostWithTriggerIdExecutionException in {@link EventParameters}. The flag is set to be false by default.',
    )
    executionId: Optional[str] = Field(
        None, description='Optional. The id of the ON_HOLD execution to be resumed.'
    )
    inputParameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = (
        Field(
            None,
            description='Optional. Input parameters used by integration execution.',
        )
    )
    parameterEntries: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoParameterEntry]
    ] = Field(
        None,
        description='Optional. Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.',
    )
    parameters: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = Field(
        None,
        description='Optional. Passed in as parameters to each integration execution. Redacted',
    )
    requestId: Optional[str] = Field(
        None,
        description='Optional. This is used to de-dup incoming request: if the duplicate request was detected, the response from the previous execution is returned.',
    )
    triggerId: Optional[str] = Field(
        None,
        description='Required. Matched against all {@link TriggerConfig}s across all integrations. i.e. TriggerConfig.trigger_id.equals(trigger_id). The trigger_id is in the format of `api_trigger/TRIGGER_NAME`.',
    )


class GoogleCloudIntegrationsV1alphaExecuteIntegrationsResponse(BaseModel):
    eventParameters: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = (
        Field(None, description='Details for the integration that were executed.')
    )
    executionFailed: Optional[bool] = Field(
        None,
        description='Is true if any execution in the integration failed. False otherwise.',
    )
    executionId: Optional[str] = Field(
        None,
        description='The id of the execution corresponding to this run of integration.',
    )
    outputParameters: Optional[Dict[str, Any]] = Field(
        None,
        description='OUTPUT parameters in format of Map. Where Key is the name of the parameter. Note: Name of the system generated parameters are wrapped by backtick(`) to distinguish them from the user defined parameters.',
    )
    parameterEntries: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoParameterEntry]
    ] = Field(
        None,
        description='Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.',
    )


class GoogleCloudIntegrationsV1alphaParameterMap(BaseModel):
    entries: Optional[List[GoogleCloudIntegrationsV1alphaParameterMapEntry]] = Field(
        None, description='A list of parameter map entries.'
    )
    keyType: Optional[KeyType2] = Field(
        None,
        description='Option to specify key type for all entries of the map. If provided then field types for all entries must conform to this.',
    )
    valueType: Optional[ValueType2] = Field(
        None,
        description='Option to specify value type for all entries of the map. If provided then field types for all entries must conform to this.',
    )


class GoogleCloudIntegrationsV1alphaScheduleIntegrationsRequest(BaseModel):
    inputParameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = (
        Field(
            None,
            description='Optional. Input parameters used by integration execution.',
        )
    )
    parameterEntries: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoParameterEntry]
    ] = Field(
        None,
        description='Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.',
    )
    parameters: Optional[EnterpriseCrmEventbusProtoEventParameters] = Field(
        None, description='Passed in as parameters to each integration execution.'
    )
    requestId: Optional[str] = Field(
        None,
        description='This is used to de-dup incoming request: if the duplicate request was detected, the response from the previous execution is returned.',
    )
    scheduleTime: Optional[str] = Field(
        None,
        description='The time that the integration should be executed. If the time is less or equal to the current time, the integration is executed immediately.',
    )
    triggerId: Optional[str] = Field(
        None,
        description='Matched against all {@link TriggerConfig}s across all integrations. i.e. TriggerConfig.trigger_id.equals(trigger_id)',
    )


class GoogleCloudIntegrationsV1alphaTestIntegrationsResponse(BaseModel):
    eventParameters: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = (
        Field(None, description='Details for the integration that were executed.')
    )
    executionFailed: Optional[bool] = Field(
        None,
        description='Is true if any execution in the integration failed. False otherwise.',
    )
    executionId: Optional[str] = Field(
        None,
        description='The id of the execution corresponding to this run of integration.',
    )
    parameterEntries: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoParameterEntry]
    ] = Field(
        None,
        description='Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.',
    )
    parameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = Field(
        None,
        description='Optional. Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.',
    )


class GoogleInternalCloudCrmEventbusV3PostToQueueWithTriggerIdRequest(BaseModel):
    clientId: Optional[str] = Field(
        None,
        description='Optional. If the client id is provided, then the combination of trigger id and client id is matched across all the workflows. If the client id is not provided, then workflows with matching trigger id are executed for each client id in the {@link TriggerConfig}. For Api Trigger, the client id is required and will be validated against the allowed clients.',
    )
    ignoreErrorIfNoActiveWorkflow: Optional[bool] = Field(
        None,
        description='Optional. Flag to determine whether clients would suppress a warning when no ACTIVE workflows are not found. If this flag is set to be true, an error will not be thrown if the requested trigger_id or client_id is not found in any ACTIVE workflow. Otherwise, the error is always thrown. The flag is set to be false by default.',
    )
    parameters: Optional[EnterpriseCrmEventbusProtoEventParameters] = Field(
        None,
        description='Passed in as parameters to each workflow execution. Optional.',
    )
    priority: Optional[Priority] = Field(
        None,
        description='The request priority this request should be processed at. For internal users:',
    )
    requestId: Optional[str] = Field(
        None,
        description='Optional. This is used to de-dup incoming request: if the duplicate request was detected, the response from the previous execution is returned. Must have no more than 36 characters and contain only alphanumeric characters and hyphens.',
    )
    scheduledTime: Optional[str] = Field(
        None,
        description='Optional. Time in milliseconds since epoch when the given event would be scheduled.',
    )
    testMode: Optional[bool] = Field(
        None,
        description='Optional. Sets test mode in {@link enterprise/crm/eventbus/event_message.proto}.',
    )
    triggerId: Optional[str] = Field(
        None,
        description='Matched against all {@link TriggerConfig}s across all workflows. i.e. TriggerConfig.trigger_id.equals(trigger_id) Required.',
    )
    workflowName: Optional[str] = Field(
        None,
        description='Optional. If provided, the workflow_name is used to filter all the matched workflows having same trigger_id+client_id. A combination of trigger_id, client_id and workflow_name identifies a unique workflow.',
    )


class EnterpriseCrmEventbusProtoCustomSuspensionRequest(BaseModel):
    postToQueueWithTriggerIdRequest: Optional[
        GoogleInternalCloudCrmEventbusV3PostToQueueWithTriggerIdRequest
    ] = Field(
        None,
        description='Request to fire an event containing the SuspensionInfo message.',
    )
    suspensionInfoEventParameterKey: Optional[str] = Field(
        None,
        description='In the fired event, set the SuspensionInfo message as the value for this key.',
    )


class EnterpriseCrmEventbusProtoEventExecutionSnapshot(BaseModel):
    checkpointTaskNumber: Optional[str] = Field(
        None,
        description='Indicates "right after which checkpoint task\'s execution" this snapshot is taken.',
    )
    conditionResults: Optional[List[EnterpriseCrmEventbusProtoConditionResult]] = Field(
        None, description='All of the computed conditions that been calculated.'
    )
    diffParams: Optional[EnterpriseCrmEventbusProtoEventParameters] = Field(
        None,
        description='The parameters in Event object that differs from last snapshot.',
    )
    eventExecutionInfoId: Optional[str] = Field(
        None, description='Points to the event execution info this snapshot belongs to.'
    )
    eventExecutionSnapshotId: Optional[str] = Field(
        None,
        description='Auto-generated. Used as primary key for EventExecutionSnapshots table.',
    )
    eventExecutionSnapshotMetadata: Optional[
        EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata
    ] = None
    eventParams: Optional[EnterpriseCrmEventbusProtoEventParameters] = Field(
        None, description='The parameters in Event object.'
    )
    exceedMaxSize: Optional[bool] = Field(
        None,
        description='indicate whether snapshot exceeded maximum size before clean up',
    )
    snapshotTime: Optional[str] = Field(
        None, description='Indicates when this snapshot is taken.'
    )
    taskExecutionDetails: Optional[
        List[EnterpriseCrmEventbusProtoTaskExecutionDetails]
    ] = Field(
        None,
        description='All of the task execution details at the given point of time.',
    )
    taskName: Optional[str] = Field(
        None, description='The task name associated with this snapshot. Could be empty.'
    )


class EnterpriseCrmEventbusProtoNotification(BaseModel):
    buganizerNotification: Optional[EnterpriseCrmEventbusProtoBuganizerNotification] = (
        None
    )
    emailAddress: Optional[EnterpriseCrmEventbusProtoAddress] = None
    escalatorQueue: Optional[str] = None
    pubsubTopic: Optional[str] = None
    request: Optional[EnterpriseCrmEventbusProtoCustomSuspensionRequest] = Field(
        None,
        description='If the out-of-the-box email/pubsub notifications are not suitable and custom logic is required, fire a workflow containing all info needed to notify users to resume execution.',
    )


class EnterpriseCrmEventbusProtoParameterMap(BaseModel):
    entries: Optional[List[EnterpriseCrmEventbusProtoParameterMapEntry]] = None
    keyType: Optional[KeyType] = Field(
        None,
        description='Option to specify key value type for all entries of the map. If provided then field types for all entries must conform to this.',
    )
    valueType: Optional[ValueType] = None


class EnterpriseCrmEventbusProtoSuspensionConfig(BaseModel):
    customMessage: Optional[str] = Field(
        None,
        description='Optional information to provide recipients of the suspension in addition to the resolution URL, typically containing relevant parameter values from the originating workflow.',
    )
    notifications: Optional[List[EnterpriseCrmEventbusProtoNotification]] = None
    suspensionExpiration: Optional[EnterpriseCrmEventbusProtoSuspensionExpiration] = (
        Field(
            None,
            description='Indicates the next steps when no external actions happen on the suspension.',
        )
    )
    whoMayResolve: Optional[
        List[EnterpriseCrmEventbusProtoSuspensionAuthPermissions]
    ] = Field(None, description='Identities able to resolve this suspension.')


class EnterpriseCrmEventbusProtoSuspensionResolutionInfo(BaseModel):
    audit: Optional[EnterpriseCrmEventbusProtoSuspensionResolutionInfoAudit] = None
    clientId: Optional[str] = Field(
        None, description='The event data user sends as request.'
    )
    cloudKmsConfig: Optional[EnterpriseCrmEventbusProtoCloudKmsConfig] = Field(
        None, description='KMS info, used by cmek/gmek integration'
    )
    createdTimestamp: Optional[str] = Field(None, description='Auto-generated.')
    encryptedSuspensionResolutionInfo: Optional[str] = Field(
        None, description='Encrypted SuspensionResolutionInfo'
    )
    eventExecutionInfoId: Optional[str] = Field(
        None, description='Required. ID of the associated execution.'
    )
    externalTraffic: Optional[EnterpriseCrmEventbusProtoExternalTraffic] = Field(
        None, description='The origin of the suspension for periodic notifications.'
    )
    lastModifiedTimestamp: Optional[str] = Field(None, description='Auto-generated.')
    product: Optional[Product] = Field(
        None,
        description='Which Google product the suspension belongs to. If not set, the suspension belongs to Integration Platform by default.',
    )
    status: Optional[Status] = None
    suspensionConfig: Optional[EnterpriseCrmEventbusProtoSuspensionConfig] = None
    suspensionId: Optional[str] = Field(
        None, description='Primary key for the SuspensionResolutionInfoTable.'
    )
    taskNumber: Optional[str] = Field(
        None, description='Required. Task number of the associated SuspensionTask.'
    )
    workflowName: Optional[str] = Field(
        None, description='Required. The name of the originating workflow.'
    )
    wrappedDek: Optional[str] = Field(None, description='Wrapped dek')


class EnterpriseCrmEventbusProtoTeardown(BaseModel):
    teardownTaskConfigs: Optional[
        List[EnterpriseCrmEventbusProtoTeardownTaskConfig]
    ] = Field(None, description='Required.')


class EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot(BaseModel):
    checkpointTaskNumber: Optional[str] = Field(
        None,
        description='Indicates "right after which checkpoint task\'s execution" this snapshot is taken.',
    )
    conditionResults: Optional[List[EnterpriseCrmEventbusProtoConditionResult]] = Field(
        None, description='All of the computed conditions that been calculated.'
    )
    diffParams: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = Field(
        None,
        description='The parameters in Event object that differs from last snapshot.',
    )
    eventExecutionInfoId: Optional[str] = Field(
        None, description='Points to the event execution info this snapshot belongs to.'
    )
    eventExecutionSnapshotId: Optional[str] = Field(
        None,
        description='Auto-generated. Used as primary key for EventExecutionSnapshots table.',
    )
    eventExecutionSnapshotMetadata: Optional[
        EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata
    ] = None
    eventParams: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = Field(
        None, description='The parameters in Event object.'
    )
    snapshotTime: Optional[str] = Field(
        None, description='Indicates when this snapshot is taken.'
    )
    taskExecutionDetails: Optional[
        List[EnterpriseCrmEventbusProtoTaskExecutionDetails]
    ] = Field(
        None,
        description='All of the task execution details at the given point of time.',
    )
    taskName: Optional[str] = Field(
        None, description='The task name associated with this snapshot. Could be empty.'
    )


class EnterpriseCrmFrontendsEventbusProtoParameterMap(BaseModel):
    entries: Optional[List[EnterpriseCrmFrontendsEventbusProtoParameterMapEntry]] = None
    keyType: Optional[KeyType] = Field(
        None,
        description='Option to specify key value type for all entries of the map. If provided then field types for all entries must conform to this.',
    )
    valueType: Optional[ValueType] = None


class GoogleCloudIntegrationsV1alphaIntegrationVersion(BaseModel):
    createTime: Optional[str] = Field(None, description='Output only. Auto-generated.')
    databasePersistencePolicy: Optional[DatabasePersistencePolicy] = Field(
        None,
        description='Optional. Flag to disable database persistence for execution data, including event execution info, execution export info, execution metadata index and execution param index.',
    )
    description: Optional[str] = Field(
        None, description='Optional. The integration description.'
    )
    errorCatcherConfigs: Optional[
        List[GoogleCloudIntegrationsV1alphaErrorCatcherConfig]
    ] = Field(
        None,
        description="Optional. Error Catch Task configuration for the integration. It's optional.",
    )
    integrationParameters: Optional[
        List[GoogleCloudIntegrationsV1alphaIntegrationParameter]
    ] = Field(
        None,
        description='Optional. Parameters that are expected to be passed to the integration when an event is triggered. This consists of all the parameters that are expected in the integration execution. This gives the user the ability to provide default values, add information like PII and also provide data types of each parameter.',
    )
    integrationParametersInternal: Optional[
        EnterpriseCrmFrontendsEventbusProtoWorkflowParameters
    ] = Field(
        None,
        description='Optional. Parameters that are expected to be passed to the integration when an event is triggered. This consists of all the parameters that are expected in the integration execution. This gives the user the ability to provide default values, add information like PII and also provide data types of each parameter.',
    )
    lastModifierEmail: Optional[str] = Field(
        None,
        description="Optional. The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.",
    )
    lockHolder: Optional[str] = Field(
        None,
        description="Optional. The edit lock holder's email address. Generated based on the End User Credentials/LOAS role of the user making the call.",
    )
    name: Optional[str] = Field(
        None, description='Output only. Auto-generated primary key.'
    )
    origin: Optional[Origin] = Field(
        None,
        description='Optional. The origin that indicates where this integration is coming from.',
    )
    parentTemplateId: Optional[str] = Field(
        None,
        description='Optional. The id of the template which was used to create this integration_version.',
    )
    runAsServiceAccount: Optional[str] = Field(
        None,
        description='Optional. The run-as service account email, if set and auth config is not configured, that will be used to generate auth token to be used in Connector task, Rest caller task and Cloud function task.',
    )
    snapshotNumber: Optional[str] = Field(
        None,
        description='Optional. An increasing sequence that is set when a new snapshot is created. The last created snapshot can be identified by [workflow_name, org_id latest(snapshot_number)]. However, last created snapshot need not be same as the HEAD. So users should always use "HEAD" tag to identify the head.',
    )
    state: Optional[State3] = Field(
        None, description='Output only. User should not set it as an input.'
    )
    status: Optional[Status2] = Field(
        None,
        description='Output only. Generated by eventbus. User should not set it as an input.',
    )
    taskConfigs: Optional[List[GoogleCloudIntegrationsV1alphaTaskConfig]] = Field(
        None,
        description="Optional. Task configuration for the integration. It's optional, but the integration doesn't do anything without task_configs.",
    )
    taskConfigsInternal: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoTaskConfig]
    ] = Field(
        None,
        description="Optional. Task configuration for the integration. It's optional, but the integration doesn't do anything without task_configs.",
    )
    teardown: Optional[EnterpriseCrmEventbusProtoTeardown] = Field(
        None,
        description='Optional. Contains a graph of tasks that will be executed before putting the event in a terminal state (SUCCEEDED/FAILED/FATAL), regardless of success or failure, similar to "finally" in code.',
    )
    triggerConfigs: Optional[List[GoogleCloudIntegrationsV1alphaTriggerConfig]] = Field(
        None, description='Optional. Trigger configurations.'
    )
    triggerConfigsInternal: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoTriggerConfig]
    ] = Field(None, description='Optional. Trigger configurations.')
    updateTime: Optional[str] = Field(None, description='Output only. Auto-generated.')
    userLabel: Optional[str] = Field(
        None,
        description='Optional. A user-defined label that annotates an integration version. Typically, this is only set when the integration version is created.',
    )


class GoogleCloudIntegrationsV1alphaListIntegrationVersionsResponse(BaseModel):
    integrationVersions: Optional[
        List[GoogleCloudIntegrationsV1alphaIntegrationVersion]
    ] = Field(None, description='The integrations which match the request.')
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    noPermission: Optional[bool] = Field(
        None, description='Whether the user has no permission on the version or not.'
    )


class GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode(BaseModel):
    accessToken: Optional[GoogleCloudIntegrationsV1alphaAccessToken] = Field(
        None, description='The access token received from the token endpoint.'
    )
    applyReauthPolicy: Optional[bool] = Field(
        None,
        description='Indicates if the user has opted in Google Reauth Policy. If opted in, the refresh token will be valid for 20 hours, after which time users must re-authenticate in order to obtain a new one.',
    )
    authCode: Optional[str] = Field(
        None,
        description='The Auth Code that is used to initially retrieve the access token.',
    )
    authEndpoint: Optional[str] = Field(
        None, description='The auth url endpoint to send the auth code request to.'
    )
    authParams: Optional[GoogleCloudIntegrationsV1alphaParameterMap] = Field(
        None, description='The auth parameters sent along with the auth code request.'
    )
    clientId: Optional[str] = Field(None, description="The client's id.")
    clientSecret: Optional[str] = Field(None, description="The client's secret.")
    requestType: Optional[RequestType] = Field(
        None, description='Represent how to pass parameters to fetch access token'
    )
    scope: Optional[str] = Field(
        None, description='A space-delimited list of requested scope permissions.'
    )
    tokenEndpoint: Optional[str] = Field(
        None, description='The token url endpoint to send the token request to.'
    )
    tokenParams: Optional[GoogleCloudIntegrationsV1alphaParameterMap] = Field(
        None, description='The token parameters sent along with the token request.'
    )


class GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials(BaseModel):
    accessToken: Optional[GoogleCloudIntegrationsV1alphaAccessToken] = Field(
        None, description='Access token fetched from the authorization server.'
    )
    clientId: Optional[str] = Field(None, description="The client's ID.")
    clientSecret: Optional[str] = Field(None, description="The client's secret.")
    requestType: Optional[RequestType] = Field(
        None, description='Represent how to pass parameters to fetch access token'
    )
    scope: Optional[str] = Field(
        None, description='A space-delimited list of requested scope permissions.'
    )
    tokenEndpoint: Optional[str] = Field(
        None,
        description='The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.',
    )
    tokenParams: Optional[GoogleCloudIntegrationsV1alphaParameterMap] = Field(
        None, description='Token parameters for the auth request.'
    )


class GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials(BaseModel):
    accessToken: Optional[GoogleCloudIntegrationsV1alphaAccessToken] = Field(
        None, description='Access token fetched from the authorization server.'
    )
    clientId: Optional[str] = Field(None, description="The client's ID.")
    clientSecret: Optional[str] = Field(None, description="The client's secret.")
    password: Optional[str] = Field(None, description="The user's password.")
    requestType: Optional[RequestType] = Field(
        None, description='Represent how to pass parameters to fetch access token'
    )
    scope: Optional[str] = Field(
        None, description='A space-delimited list of requested scope permissions.'
    )
    tokenEndpoint: Optional[str] = Field(
        None,
        description='The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.',
    )
    tokenParams: Optional[GoogleCloudIntegrationsV1alphaParameterMap] = Field(
        None, description='Token parameters for the auth request.'
    )
    username: Optional[str] = Field(None, description="The user's username.")


class GoogleCloudIntegrationsV1alphaSuspension(BaseModel):
    approvalConfig: Optional[GoogleCloudIntegrationsV1alphaSuspensionApprovalConfig] = (
        Field(
            None,
            description='Controls the notifications and approval permissions for this suspension.',
        )
    )
    audit: Optional[GoogleCloudIntegrationsV1alphaSuspensionAudit] = Field(
        None, description='Metadata pertaining to the resolution of this suspension.'
    )
    createTime: Optional[str] = Field(None, description='Output only. Auto-generated.')
    eventExecutionInfoId: Optional[str] = Field(
        None, description='Required. ID of the associated execution.'
    )
    integration: Optional[str] = Field(
        None, description='Required. The name of the originating integration.'
    )
    lastModifyTime: Optional[str] = Field(
        None, description='Output only. Auto-generated.'
    )
    name: Optional[str] = Field(
        None, description='Resource name for suspensions suspension/{suspension_id}'
    )
    state: Optional[State4] = Field(
        None,
        description='Required. State of this suspension, indicating what action a resolver has taken.',
    )
    suspensionConfig: Optional[EnterpriseCrmEventbusProtoSuspensionConfig] = Field(
        None,
        description='Controls the notifications and resolver permissions for this suspension.',
    )
    taskId: Optional[str] = Field(
        None, description='Required. Task id of the associated SuspensionTask.'
    )


class GoogleCloudIntegrationsV1alphaTakeoverEditLockResponse(BaseModel):
    integrationVersion: Optional[GoogleCloudIntegrationsV1alphaIntegrationVersion] = (
        Field(None, description='Version after the lock is acquired by the new user.')
    )


class GoogleCloudIntegrationsV1alphaTestIntegrationsRequest(BaseModel):
    clientId: Optional[str] = Field(
        None,
        description='Required. This is used to identify the client on whose behalf the event will be executed.',
    )
    deadlineSecondsTime: Optional[str] = Field(
        None, description='Optional. custom deadline of the rpc'
    )
    inputParameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = (
        Field(
            None,
            description='Optional. Input parameters used during integration execution.',
        )
    )
    integrationVersion: Optional[GoogleCloudIntegrationsV1alphaIntegrationVersion] = (
        Field(None, description='Required. integration config to execute the workflow')
    )
    parameters: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = Field(
        None,
        description='Optional. Passed in as parameters to each integration execution.',
    )
    testMode: Optional[bool] = Field(
        None,
        description='Optional. Can be specified in the event request, otherwise false (default). If true, enables tasks with condition "test_mode = true". If false, disables tasks with condition "test_mode = true" if global test mode (set by platform) is also false {@link EventBusConfig}.',
    )
    triggerId: Optional[str] = Field(
        None,
        description='Required. The trigger id of the integration trigger config. If both trigger_id and client_id is present, the integration is executed from the start tasks provided by the matching trigger config otherwise it is executed from the default start tasks.',
    )


class GoogleCloudIntegrationsV1alphaUploadIntegrationVersionResponse(BaseModel):
    integrationVersion: Optional[GoogleCloudIntegrationsV1alphaIntegrationVersion] = (
        Field(None, description='The uploaded integration.')
    )


class EnterpriseCrmEventbusProtoEventExecutionDetails(BaseModel):
    eventAttemptStats: Optional[
        List[EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats]
    ] = None
    eventExecutionSnapshot: Optional[
        List[EnterpriseCrmEventbusProtoEventExecutionSnapshot]
    ] = None
    eventExecutionState: Optional[EventExecutionState] = None
    eventRetriesFromBeginningCount: Optional[int] = Field(
        None,
        description='Indicates the number of times the execution has restarted from the beginning.',
    )
    logFilePath: Optional[str] = Field(
        None, description='The log file path (aka. cns address) for this event.'
    )
    networkAddress: Optional[str] = Field(
        None,
        description='The network address (aka. bns address) that indicates where the event executor is running.',
    )
    nextExecutionTime: Optional[str] = Field(
        None,
        description='Next scheduled execution time in case the execution status was RETRY_ON_HOLD.',
    )
    ryeLockUnheldCount: Optional[int] = Field(
        None,
        description="Used internally and shouldn't be exposed to users. A counter for the cron job to record how many times this event is in in_process state but don't have a lock consecutively/",
    )


class EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails(BaseModel):
    eventAttemptStats: Optional[
        List[EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats]
    ] = None
    eventExecutionSnapshot: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot]
    ] = Field(
        None,
        description='After snapshot migration, this field will no longer be populated, but old execution snapshots will still be accessible.',
    )
    eventExecutionState: Optional[EventExecutionState] = Field(
        None, description='The execution state of this event.'
    )
    eventRetriesFromBeginningCount: Optional[int] = Field(
        None,
        description='Indicates the number of times the execution has restarted from the beginning.',
    )
    logFilePath: Optional[str] = Field(
        None, description='The log file path (aka. cns address) for this event.'
    )
    networkAddress: Optional[str] = Field(
        None,
        description='The network address (aka. bns address) that indicates where the event executor is running.',
    )
    nextExecutionTime: Optional[str] = Field(
        None,
        description='Next scheduled execution time in case the execution status was RETRY_ON_HOLD.',
    )
    ryeLockUnheldCount: Optional[int] = Field(
        None,
        description="Used internally and shouldn't be exposed to users. A counter for the cron job to record how many times this event is in in_process state but don't have a lock consecutively/",
    )


class EnterpriseCrmFrontendsEventbusProtoEventExecutionInfo(BaseModel):
    clientId: Optional[str] = Field(
        None, description='The event data user sends as request.'
    )
    createTime: Optional[str] = Field(None, description='Auto-generated.')
    errorCode: Optional[CrmlogErrorCode] = Field(
        None, description='Final error-code if event failed.'
    )
    errors: Optional[List[EnterpriseCrmEventbusProtoErrorDetail]] = Field(
        None,
        description='Errors, warnings, and informationals associated with the workflow/task. The order in which the errors were added by the workflow/task is maintained.',
    )
    eventExecutionDetails: Optional[
        EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails
    ] = Field(None, description='The execution info about this event.')
    eventExecutionInfoId: Optional[str] = Field(
        None, description='Auto-generated primary key.'
    )
    executionTraceInfo: Optional[EnterpriseCrmEventbusProtoExecutionTraceInfo] = Field(
        None, description='Execution trace info to aggregate parent-child executions.'
    )
    lastModifiedTime: Optional[str] = Field(None, description='Auto-generated.')
    postMethod: Optional[PostMethod] = Field(
        None, description='The ways user posts this event.'
    )
    product: Optional[Product] = Field(
        None,
        description='Which Google product the execution_info belongs to. If not set, the execution_info belongs to Integration Platform by default.',
    )
    requestId: Optional[str] = Field(
        None, description='Optional. This is used to de-dup incoming request.'
    )
    requestParams: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = Field(
        None, description='Event parameters come in as part of the request.'
    )
    responseParams: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = (
        Field(None, description='Event parameters come out as part of the response.')
    )
    snapshotNumber: Optional[str] = Field(None, description='Workflow snapshot number.')
    tenant: Optional[str] = Field(
        None,
        description='Tenant this event is created. Used to reschedule the event to correct tenant.',
    )
    triggerId: Optional[str] = Field(
        None,
        description='The trigger id of the workflow trigger config. If both trigger_id and client_id is present, the workflow is executed from the start tasks provided by the matching trigger config otherwise it is executed from the default start tasks.',
    )
    workflowId: Optional[str] = Field(
        None, description='Required. Pointer to the workflow it is executing.'
    )
    workflowName: Optional[str] = Field(None, description='Name of the workflow.')
    workflowRetryBackoffIntervalSeconds: Optional[str] = Field(
        None,
        description='Time interval in seconds to schedule retry of workflow in manifold when workflow is already running',
    )


class GoogleCloudIntegrationsV1alphaCredential(BaseModel):
    authToken: Optional[GoogleCloudIntegrationsV1alphaAuthToken] = Field(
        None, description='Auth token credential'
    )
    credentialType: Optional[CredentialType] = Field(
        None, description='Credential type associated with auth config.'
    )
    jwt: Optional[GoogleCloudIntegrationsV1alphaJwt] = Field(
        None, description='JWT credential'
    )
    oauth2AuthorizationCode: Optional[
        GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode
    ] = Field(
        None,
        description='The api_key and oauth2_implicit are not covered in v1 and will be picked up once v1 is implemented. ApiKey api_key = 3; OAuth2 authorization code credential',
    )
    oauth2ClientCredentials: Optional[
        GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials
    ] = Field(
        None,
        description='OAuth2Implicit oauth2_implicit = 5; OAuth2 client credentials',
    )
    oauth2ResourceOwnerCredentials: Optional[
        GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials
    ] = Field(None, description='OAuth2 resource owner credentials')
    oidcToken: Optional[GoogleCloudIntegrationsV1alphaOidcToken] = Field(
        None, description='Google OIDC ID Token'
    )
    serviceAccountCredentials: Optional[
        GoogleCloudIntegrationsV1alphaServiceAccountCredentials
    ] = Field(None, description='Service account credential')
    usernameAndPassword: Optional[GoogleCloudIntegrationsV1alphaUsernameAndPassword] = (
        Field(None, description='Username and password credential')
    )


class GoogleCloudIntegrationsV1alphaExecution(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Created time of the execution.'
    )
    directSubExecutions: Optional[List[GoogleCloudIntegrationsV1alphaExecution]] = (
        Field(None, description='Direct sub executions of the following Execution.')
    )
    eventExecutionDetails: Optional[EnterpriseCrmEventbusProtoEventExecutionDetails] = (
        Field(None, description='The execution info about this event.')
    )
    executionDetails: Optional[GoogleCloudIntegrationsV1alphaExecutionDetails] = Field(
        None, description='Detailed info of this execution.'
    )
    executionMethod: Optional[ExecutionMethod] = Field(
        None, description='The ways user posts this event.'
    )
    name: Optional[str] = Field(None, description='Auto-generated primary key.')
    requestParameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = (
        Field(None, description='Event parameters come in as part of the request.')
    )
    requestParams: Optional[List[EnterpriseCrmFrontendsEventbusProtoParameterEntry]] = (
        Field(None, description='Event parameters come in as part of the request.')
    )
    responseParameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = (
        Field(None, description='Event parameters returned as part of the response.')
    )
    responseParams: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoParameterEntry]
    ] = Field(None, description='Event parameters come out as part of the response.')
    triggerId: Optional[str] = Field(
        None,
        description='The trigger id of the integration trigger config. If both trigger_id and client_id is present, the integration is executed from the start tasks provided by the matching trigger config otherwise it is executed from the default start tasks.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Last modified time of the execution.'
    )


class GoogleCloudIntegrationsV1alphaListExecutionsResponse(BaseModel):
    executionInfos: Optional[
        List[EnterpriseCrmFrontendsEventbusProtoEventExecutionInfo]
    ] = Field(
        None, description='Required. The detailed information of requested executions.'
    )
    executions: Optional[List[GoogleCloudIntegrationsV1alphaExecution]] = Field(
        None, description='The detailed information of requested executions'
    )
    nextPageToken: Optional[str] = Field(
        None, description='The token used to retrieve the next page results.'
    )


class GoogleCloudIntegrationsV1alphaListSuspensionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Token to retrieve the next page of results.'
    )
    suspensions: Optional[List[GoogleCloudIntegrationsV1alphaSuspension]] = Field(
        None,
        description='The suspensions for the relevant execution which the caller has permissions to view and resolve.',
    )


class GoogleCloudIntegrationsV1alphaResolveSuspensionRequest(BaseModel):
    suspension: Optional[GoogleCloudIntegrationsV1alphaSuspension] = Field(
        None,
        description='Suspension, containing the event_execution_info_id, task_id, and state to set on the corresponding suspension record.',
    )


class GoogleCloudIntegrationsV1alphaAuthConfig(BaseModel):
    certificateId: Optional[str] = Field(
        None, description='Certificate id for client certificate'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the auth config is created.'
    )
    creatorEmail: Optional[str] = Field(
        None,
        description="The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.",
    )
    credentialType: Optional[CredentialType] = Field(
        None, description='Credential type of the encrypted credential.'
    )
    decryptedCredential: Optional[GoogleCloudIntegrationsV1alphaCredential] = Field(
        None, description='Raw auth credentials.'
    )
    description: Optional[str] = Field(
        None, description='A description of the auth config.'
    )
    displayName: Optional[str] = Field(None, description='The name of the auth config.')
    encryptedCredential: Optional[str] = Field(
        None,
        description='Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.',
    )
    expiryNotificationDuration: Optional[List[str]] = Field(
        None,
        description='User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.',
    )
    lastModifierEmail: Optional[str] = Field(
        None,
        description="The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.",
    )
    name: Optional[str] = Field(
        None,
        description='Resource name of the SFDC instance projects/{project}/locations/{location}/authConfigs/{authConfig}.',
    )
    overrideValidTime: Optional[str] = Field(
        None,
        description='User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.',
    )
    reason: Optional[str] = Field(
        None, description='The reason / details of the current status.'
    )
    state: Optional[State1] = Field(None, description='The status of the auth config.')
    updateTime: Optional[str] = Field(
        None, description='Output only. The timestamp when the auth config is modified.'
    )
    validTime: Optional[str] = Field(
        None,
        description="The time until the auth config is valid. Empty or max value is considered the auth config won't expire.",
    )
    visibility: Optional[Visibility] = Field(
        None, description='The visibility of the auth config.'
    )


class GoogleCloudIntegrationsV1alphaListAuthConfigsResponse(BaseModel):
    authConfigs: Optional[List[GoogleCloudIntegrationsV1alphaAuthConfig]] = Field(
        None, description='The list of AuthConfigs retrieved.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='The token used to retrieve the next page of results.'
    )


class EnterpriseCrmEventbusProtoBaseValue(BaseModel):
    baseFunction: Optional[EnterpriseCrmEventbusProtoFunction] = Field(
        None,
        description='Start with a function that does not build on existing values. Eg. CurrentTime, Min, Max, Exists, etc.',
    )
    literalValue: Optional[EnterpriseCrmEventbusProtoParameterValueType] = Field(
        None, description='Start with a literal value.'
    )
    referenceValue: Optional[str] = Field(
        None, description='Start with a reference value to dereference.'
    )


class EnterpriseCrmEventbusProtoField(BaseModel):
    cardinality: Optional[Cardinality] = Field(
        None,
        description='By default, if the cardinality is unspecified the field is considered required while mapping.',
    )
    defaultValue: Optional[EnterpriseCrmEventbusProtoParameterValueType] = Field(
        None,
        description='This holds the default values for the fields. This value is supplied by user so may or may not contain PII or SPII data.',
    )
    fieldType: Optional[FieldType] = Field(
        None, description='Specifies the data type of the field.'
    )
    protoDefPath: Optional[str] = Field(
        None,
        description='Optional. The fully qualified proto name (e.g. enterprise.crm.storage.Account). Required for output field of type PROTO_VALUE or PROTO_ARRAY. For e.g., if input field_type is BYTES and output field_type is PROTO_VALUE, then fully qualified proto type url should be provided to parse the input bytes. If field_type is *_ARRAY, then all the converted protos are of the same type.',
    )
    referenceKey: Optional[str] = Field(
        None,
        description='This holds the reference key of the workflow or task parameter. 1. Any workflow parameter, for e.g. $workflowParam1$. 2. Any task input or output parameter, for e.g. $task1_param1$. 3. Any workflow or task parameters with subfield references, for e.g., $task1_param1.employee.id$',
    )
    transformExpression: Optional[EnterpriseCrmEventbusProtoTransformExpression] = (
        Field(
            None,
            description="This is the transform expression to fetch the input field value. for e.g. $param1$.CONCAT('test'). Keep points - 1. Only input field can have a transform expression. 2. If a transform expression is provided, reference_key will be ignored. 3. If no value is returned after evaluation of transform expression, default_value can be mapped if provided. 4. The field_type should be the type of the final object returned after the transform expression is evaluated. Scrubs the transform expression before logging as value provided by user so may or may not contain PII or SPII data.",
        )
    )


class EnterpriseCrmEventbusProtoFieldMappingConfig(BaseModel):
    mappedFields: Optional[List[EnterpriseCrmEventbusProtoMappedField]] = None


class EnterpriseCrmEventbusProtoFunction(BaseModel):
    functionType: Optional[EnterpriseCrmEventbusProtoFunctionType] = Field(
        None, description='The name of the function to perform.'
    )
    parameters: Optional[List[EnterpriseCrmEventbusProtoTransformExpression]] = Field(
        None, description='List of parameters required for the transformation.'
    )


class EnterpriseCrmEventbusProtoMappedField(BaseModel):
    inputField: Optional[EnterpriseCrmEventbusProtoField] = Field(
        None, description='The input field being mapped from.'
    )
    outputField: Optional[EnterpriseCrmEventbusProtoField] = Field(
        None, description='The output field being mapped to.'
    )


class EnterpriseCrmEventbusProtoTransformExpression(BaseModel):
    initialValue: Optional[EnterpriseCrmEventbusProtoBaseValue] = Field(
        None, description='Initial value upon which to perform transformations.'
    )
    transformationFunctions: Optional[List[EnterpriseCrmEventbusProtoFunction]] = Field(
        None, description='Transformations to be applied sequentially.'
    )


EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry.model_rebuild()
GoogleCloudIntegrationsV1alphaExecution.model_rebuild()
EnterpriseCrmEventbusProtoBaseValue.model_rebuild()
EnterpriseCrmEventbusProtoField.model_rebuild()
EnterpriseCrmEventbusProtoFieldMappingConfig.model_rebuild()
EnterpriseCrmEventbusProtoFunction.model_rebuild()
